import{_ as s,c as n,o as e,ag as l}from"./chunks/framework.BgId8OS5.js";const i="/assets/fe-process-copy.BD9XquFd.webp",m=JSON.parse('{"title":"想法和总结","description":"","frontmatter":{"title":"想法和总结"},"headers":[],"relativePath":"fe/frameWork/thought.md","filePath":"fe/frameWork/thought.md","lastUpdated":1704275069000}'),p={name:"fe/frameWork/thought.md"};function t(r,a,o,c,h,u){return e(),n("div",null,a[0]||(a[0]=[l(`<h3 id="中后台系统" tabindex="-1">中后台系统 <a class="header-anchor" href="#中后台系统" aria-label="Permalink to &quot;中后台系统&quot;">​</a></h3><h4 id="中台" tabindex="-1">中台 <a class="header-anchor" href="#中台" aria-label="Permalink to &quot;中台&quot;">​</a></h4><ul><li><a href="https://zhuanlan.zhihu.com/p/75223466" target="_blank" rel="noreferrer">中台”到底是什么？</a></li></ul><p>目的：便于高速发展的复杂应用的敏捷开发</p><p>手段：解耦，提高复用</p><p>在一般的中后台系统中，我们可以把前端的架构划分为三大部分：这分别是<strong>核心框架库</strong>，<strong>插件</strong>，<strong>公共机制</strong>。</p><ul><li>核心框架库： 系统的基础框架技术选型，比如像Vue,Vuex,Vue Router，或者说React,Redux,Router这样的，就属于核心框架库，这一部分选型是在前期完成的，需要慎重，因为它决定了整个系统以后的开发走向；</li><li>插件： 可以理解为工具库，比如UI框架库antd、element，图表工具库eCharts，3d库three.js等等</li><li>公共机制： 把一些公共的功能模块封装起来，以供其他开发人员使用，极大提升开发效率。核心在于封装。</li></ul><p>在中后台系统中，这一般包括以下五个小部分：</p><ol><li><p>UI组件库的二次封装。这针对一些极其常用的UI组件，主要是为了统一风格，以使用频率最高的table和form为代表；</p></li><li><p>请求插件的封装。以axios为例，主要是做后台请求发生错误的统一拦截显示；</p></li><li><p>后台API请求的URL地址文件封装。这主要是为了统一管理，使得URL不会零散地分布在各个业务组件中，统一修改，统一替换公共域名等；</p></li><li><p>权限和菜单的封装。一般中后台系统是分人员角色的，那么不同的角色就对应不同的权限，拿到的菜单也不一样；</p></li><li><p>格式化的封装。像中后台系统里面的很多格式是比较常见的，如身份证、电话号码、日期、金额、车牌号等，这些可用于一些前端校验和前端展示的场景，且在很多地方都会用到，所以非常有必要把一些常用的格式化操作放到全局。</p></li></ol><ul><li><a href="https://blog.csdn.net/qq_29438877/article/details/108675426" target="_blank" rel="noreferrer">前端架构探索与实践</a></li></ul><h2 id="项目目录结构" tabindex="-1">项目目录结构 <a class="header-anchor" href="#项目目录结构" aria-label="Permalink to &quot;项目目录结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─src               //  项目目录</span></span>
<span class="line"><span>│  ├─api                //  数据请求</span></span>
<span class="line"><span>│  ├─assets             //  资源</span></span>
<span class="line"><span>│  │  ├─baseData            //  静态数据</span></span>
<span class="line"><span>│  │  └─images              //  较小图片资源</span></span>
<span class="line"><span>│  ├─components         //  组件</span></span>
<span class="line"><span>│  │    ├─base              //  基础组件</span></span>
<span class="line"><span>│  │    └─business          //  业务组件</span></span>
<span class="line"><span>│  ├─routes             //  路由</span></span>
<span class="line"><span>│  ├─mixins             //  混入</span></span>
<span class="line"><span>│  ├─store              //  状态管理</span></span>
<span class="line"><span>│  ├─style              //  样式</span></span>
<span class="line"><span>│  ├─views              //  页面</span></span>
<span class="line"><span>│  ├─utils              //  工具</span></span>
<span class="line"><span>│  └─main.js            //  入口文件</span></span>
<span class="line"><span>└─static            //  静态资源</span></span></code></pre></div><ol><li>api：主要负责提供数据请求的方法</li><li>assets：提供业务中所需要的数据资源以及较小的图片资源，vue-cli会把较小的图片编译成base64</li><li>components：承载了业务中所有需要用到的组件，使用base和business对基础组件进一步划分</li><li>routes：编写路由结构</li><li>mixins：公用代码的混入</li><li>store：页面中的状态管理</li><li>style：页面和组件样式</li><li>views：存放页面</li><li>utils：页面或组件中所需要用到的工具，以及对于其他第三方工具的二次封装</li><li>main.js：程序的入口文件</li><li>static：较大的静态资源文件</li></ol><h2 id="前端工作流" tabindex="-1">前端工作流 <a class="header-anchor" href="#前端工作流" aria-label="Permalink to &quot;前端工作流&quot;">​</a></h2><p>忘记哪里copy的了</p><p><img src="`+i+'" alt=""></p>',16)]))}const _=s(p,[["render",t]]);export{m as __pageData,_ as default};
