import{_ as e,c as a,o as l,ag as i}from"./chunks/framework.BgId8OS5.js";const r="/assets/osi_model_tcp_ip_model1.dUX-3len.png",n="/assets/1.XHeC2cgc.png",s="/assets/2.BjdSbdqT.png",o="/assets/3.PuyRnA8D.png",p="/assets/tcp_there_time_hands.Bvx_qCuu.png",d="/assets/4.HWUSPgQz.png",c="/assets/5.Dom6kec1.png",h="/assets/6.CkjL19t6.png",g="/assets/7.HAQcFz0A.png",u="/assets/8.zmlIA7Zv.png",T="/assets/9.DSSWB8-e.png",P="/assets/10.BajWxk7T.png",k="/assets/11.BwSBRMyK.png",f="/assets/12.Dtcswj1f.png",x="/assets/13.zilYpAho.png",C="/assets/dnsfind.LJcfe4Un.png",b="/assets/dnsfind2.CceOC59F.png",m="/assets/web_cache.m7FEL7sl.png",D=JSON.parse('{"title":"网络相关","description":"","frontmatter":{"title":"网络相关"},"headers":[],"relativePath":"fe/frameWork/network.md","filePath":"fe/frameWork/network.md","lastUpdated":1683123759000}'),y={name:"fe/frameWork/network.md"};function q(E,t,S,A,H,R){return l(),a("div",null,t[0]||(t[0]=[i('<h3 id="「查缺补漏」巩固你的http知识体系" tabindex="-1"><a href="https://juejin.cn/post/6857287743966281736" target="_blank" rel="noreferrer">「查缺补漏」巩固你的HTTP知识体系</a> <a class="header-anchor" href="#「查缺补漏」巩固你的http知识体系" aria-label="Permalink to &quot;[「查缺补漏」巩固你的HTTP知识体系](https://juejin.cn/post/6857287743966281736)&quot;">​</a></h3><ul><li><a href="#osi">OSI</a></li><li><a href="#udp">UDP</a><ul><li><a href="#面向报文">面向报文</a></li><li><a href="#不可靠性">不可靠性</a></li><li><a href="#高效">高效</a></li><li><a href="#传输方式">传输方式</a></li></ul></li><li><a href="#tcp">TCP</a><ul><li><a href="#头部">头部</a></li><li><a href="#状态机">状态机</a><ul><li><a href="#建立连接三次握手">建立连接三次握手</a></li><li><a href="#断开链接四次握手">断开链接四次握手</a></li></ul></li><li><a href="#arq-协议">ARQ 协议</a><ul><li><a href="#停止等待-arq">停止等待 ARQ</a></li><li><a href="#连续-arq">连续 ARQ</a></li><li><a href="#累计确认">累计确认</a></li></ul></li><li><a href="#滑动窗口">滑动窗口</a><ul><li><a href="#zero-窗口">Zero 窗口</a></li></ul></li><li><a href="#拥塞处理">拥塞处理</a><ul><li><a href="#慢开始算法">慢开始算法</a></li><li><a href="#拥塞避免算法">拥塞避免算法</a></li><li><a href="#快速重传">快速重传</a></li><li><a href="#tcp-new-ren-改进后的快恢复">TCP New Ren 改进后的快恢复</a></li></ul></li></ul></li><li><a href="#http">HTTP</a><ul><li><a href="#head方法和options方法">HEAD方法和OPTIONS方法</a></li><li><a href="#post-和-get-的区别">Post 和 Get 的区别</a></li><li><a href="#常见的四种post提交数据编码格式">常见的四种post提交数据编码格式</a></li><li><a href="#axios的content-type">axios的content-type</a></li><li><a href="#简单请求与复杂请求">简单请求与复杂请求</a></li><li><a href="#http状态码">HTTP状态码</a></li><li><a href="#http-首部">HTTP 首部</a></li></ul></li><li><a href="#https">HTTPS</a><ul><li><a href="#tls">TLS</a></li></ul></li><li><a href="#http-2-0">HTTP 2.0</a><ul><li><a href="#二进制传输">二进制传输</a></li><li><a href="#多路复用">多路复用</a></li><li><a href="#header-压缩">Header 压缩</a></li><li><a href="#服务端-push">服务端 Push</a></li><li><a href="#quic">QUIC</a></li></ul></li><li><a href="#dns">DNS</a></li><li><a href="#cdn">CDN</a></li><li><a href="#浏览器缓存机制">浏览器缓存机制</a></li><li><a href="#从输入-url-到页面加载完成的过程">从输入 URL 到页面加载完成的过程</a></li></ul><h2 id="osi" tabindex="-1"><a href="https://zhuanlan.zhihu.com/p/32059190" target="_blank" rel="noreferrer">OSI</a> <a class="header-anchor" href="#osi" aria-label="Permalink to &quot;[OSI](https://zhuanlan.zhihu.com/p/32059190)&quot;">​</a></h2><p>OSI-Open Systems Interconncection，网络分层 从上到下分别是：</p><ol><li><p>应用层(Application)</p></li><li><p>表示层(Presentation)</p></li><li><p>会话层(Session)</p></li><li><p>传输层(Transport)</p></li><li><p>网络层(Network) -- 路由器</p></li><li><p>数据链路层(Data Link) -- 交换机</p></li><li><p>物理层(Physical) -- 网卡、集线器（Hub）</p></li></ol><p><img src="'+r+'" alt=""></p><h1 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-label="Permalink to &quot;UDP&quot;">​</a></h1><p>UDP，User Datagram Protocol，一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务</p><p><a href="https://blog.csdn.net/aa1928992772/article/details/85240358" target="_blank" rel="noreferrer">UDP协议的详细解析</a></p><h2 id="面向报文" tabindex="-1">面向报文 <a class="header-anchor" href="#面向报文" aria-label="Permalink to &quot;面向报文&quot;">​</a></h2><p>UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。</p><p>具体来说</p><ul><li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li><li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li></ul><h2 id="不可靠性" tabindex="-1">不可靠性 <a class="header-anchor" href="#不可靠性" aria-label="Permalink to &quot;不可靠性&quot;">​</a></h2><ol><li>UDP 是无连接的，也就是说通信不需要建立和断开连接。</li><li>UDP 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的</li><li>UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</li></ol><h2 id="高效" tabindex="-1">高效 <a class="header-anchor" href="#高效" aria-label="Permalink to &quot;高效&quot;">​</a></h2><p>因为 UDP 没有 TCP 那么复杂，需要保证数据不丢失且有序到达。所以 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。</p><p><img src="'+n+'" alt=""></p><p>头部包含了以下几个数据</p><ul><li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li><li>整个数据报文的长度</li><li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li></ul><h2 id="传输方式" tabindex="-1">传输方式 <a class="header-anchor" href="#传输方式" aria-label="Permalink to &quot;传输方式&quot;">​</a></h2><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p><h1 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h1><ul><li><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noreferrer">TCP 的那些事儿</a></li></ul><p>传输控制协议（TCP，Transmission Control Protocol）是一种<strong>面向连接的</strong>、<strong>可靠的</strong>、基于字节流的传输层通信协议。</p><h2 id="头部" tabindex="-1">头部 <a class="header-anchor" href="#头部" aria-label="Permalink to &quot;头部&quot;">​</a></h2><p>TCP 头部比 UDP 头部复杂的多</p><p><img src="'+s+'" alt=""></p><p>对于 TCP 头部来说，以下几个字段是很重要的</p><ul><li>Sequence number，这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文</li><li>Acknowledgement Number，这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到</li><li>Window Size，窗口大小，表示还能接收多少字节的数据，用于流量控制</li><li>标识符 <ul><li>URG=1：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。</li><li>ACK=1：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。</li><li>PSH=1：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。</li><li>RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。</li><li>SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。</li><li>FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。</li></ul></li></ul><h2 id="状态机" tabindex="-1">状态机 <a class="header-anchor" href="#状态机" aria-label="Permalink to &quot;状态机&quot;">​</a></h2><p>HTTP 是无连接的，所以作为下层的 TCP 协议也是无连接的，虽然看似 TCP 将两端连接了起来，但是其实只是两端共同维护了一个状态</p><p><img src="'+o+'" alt=""></p><p>TCP 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。</p><p>在这之前需要了解一个重要的性能指标 RTT。该指标表示发送端发送数据到接收到对端数据所需的往返时间。</p><h3 id="建立连接三次握手" tabindex="-1">建立连接三次握手 <a class="header-anchor" href="#建立连接三次握手" aria-label="Permalink to &quot;建立连接三次握手&quot;">​</a></h3><p><a href="https://juejin.cn/post/6844903958624878606" target="_blank" rel="noreferrer">三次握手和四次挥手</a></p><blockquote><p>三次握手：发送端首先发送一个带SYN(synchronize)标志的数据包给对方。接受端收到后，回传一个带有SYN/ACK(acknowledgement)标志的数据包以示传达确认消息。最后，发送端在回传一个带 ACK标志的数据包，代表“握手”结束。</p></blockquote><p><img src="'+p+'" alt=""></p><p><img src="'+d+'" alt=""></p><p>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。</p><p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。</p><p><strong>第一次握手</strong></p><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，<code>x</code> 表示客户端的数据通信初始序号。</p><p><strong>第二次握手</strong></p><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p><p><strong>第三次握手</strong></p><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p><p>PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p><p><strong>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？</strong></p><p>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。</p><p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。</p><p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。</p><h3 id="断开链接四次握手" tabindex="-1">断开链接四次握手 <a class="header-anchor" href="#断开链接四次握手" aria-label="Permalink to &quot;断开链接四次握手&quot;">​</a></h3><p><img src="'+c+'" alt=""></p><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p><p><strong>第一次握手</strong></p><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p><p><strong>第二次握手</strong></p><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。</p><p><strong>第三次握手</strong></p><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p><p>PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p><p><strong>第四次握手</strong></p><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p><p><strong>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</strong></p><p>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。</p><h2 id="arq-协议" tabindex="-1">ARQ 协议 <a class="header-anchor" href="#arq-协议" aria-label="Permalink to &quot;ARQ 协议&quot;">​</a></h2><p>ARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ</p><h3 id="停止等待-arq" tabindex="-1">停止等待 ARQ <a class="header-anchor" href="#停止等待-arq" aria-label="Permalink to &quot;停止等待 ARQ&quot;">​</a></h3><p><strong>正常传输过程</strong></p><p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p><p><strong>报文丢失或出错</strong></p><p>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。</p><p>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。</p><p>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</p><p><strong>ACK 超时或丢失</strong></p><p>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。</p><p>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。</p><p><strong>这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。</strong></p><h3 id="连续-arq" tabindex="-1">连续 ARQ <a class="header-anchor" href="#连续-arq" aria-label="Permalink to &quot;连续 ARQ&quot;">​</a></h3><p>在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p><h3 id="累计确认" tabindex="-1">累计确认 <a class="header-anchor" href="#累计确认" aria-label="Permalink to &quot;累计确认&quot;">​</a></h3><p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1的数据。</p><p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决，这个会在下文说到。</p><h2 id="滑动窗口" tabindex="-1">滑动窗口 <a class="header-anchor" href="#滑动窗口" aria-label="Permalink to &quot;滑动窗口&quot;">​</a></h2><p>在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。</p><p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p><p><img src="'+h+'" alt=""></p><p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。</p><p>当发送端接收到应答报文后，会随之将窗口进行滑动</p><p><img src="'+g+`" alt=""></p><p>滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。</p><h3 id="zero-窗口" tabindex="-1">Zero 窗口 <a class="header-anchor" href="#zero-窗口" aria-label="Permalink to &quot;Zero 窗口&quot;">​</a></h3><p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。</p><h2 id="拥塞处理" tabindex="-1">拥塞处理 <a class="header-anchor" href="#拥塞处理" aria-label="Permalink to &quot;拥塞处理&quot;">​</a></h2><p>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p><p>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。</p><h3 id="慢开始算法" tabindex="-1">慢开始算法 <a class="header-anchor" href="#慢开始算法" aria-label="Permalink to &quot;慢开始算法&quot;">​</a></h3><p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。</p><p>慢开始算法步骤具体如下</p><ol><li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）</li><li>每过一个 RTT 就将窗口大小乘二</li><li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li></ol><h3 id="拥塞避免算法" tabindex="-1">拥塞避免算法 <a class="header-anchor" href="#拥塞避免算法" aria-label="Permalink to &quot;拥塞避免算法&quot;">​</a></h3><p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p><p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p><ul><li>将阈值设为当前拥塞窗口的一半</li><li>将拥塞窗口设为 1 MSS</li><li>启动拥塞避免算法</li></ul><h3 id="快速重传" tabindex="-1">快速重传 <a class="header-anchor" href="#快速重传" aria-label="Permalink to &quot;快速重传&quot;">​</a></h3><p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：</p><p><strong>TCP Taho 实现如下</strong></p><ul><li>将阈值设为当前拥塞窗口的一半</li><li>将拥塞窗口设为 1 MSS</li><li>重新开始慢开始算法</li></ul><p><strong>TCP Reno 实现如下</strong></p><ul><li>拥塞窗口减半</li><li>将阈值设为当前拥塞窗口</li><li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）</li><li>使用拥塞避免算法</li></ul><h3 id="tcp-new-ren-改进后的快恢复" tabindex="-1">TCP New Ren 改进后的快恢复 <a class="header-anchor" href="#tcp-new-ren-改进后的快恢复" aria-label="Permalink to &quot;TCP New Ren 改进后的快恢复&quot;">​</a></h3><p><strong>TCP New Reno</strong> 算法改进了之前 <strong>TCP Reno</strong> 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</p><p>在 <strong>TCP New Reno</strong> 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</p><p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p><h1 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h1><p>HTTP 协议是个无状态协议，不会保存状态。</p><h2 id="head方法和options方法" tabindex="-1">HEAD方法和OPTIONS方法 <a class="header-anchor" href="#head方法和options方法" aria-label="Permalink to &quot;HEAD方法和OPTIONS方法&quot;">​</a></h2><blockquote><p>http HEAD方法是获取报文首部，和GET方法一样，只是不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等。 http OPTIONS方法是询问支持方法，用来查询针对请求URI指定的资源支持的方法。2、用来检查服务器的性能。例如：AJAX 进行跨域请求时的预检，需要向另外一个域名的资源发送一个 HTTP OPTIONS 请求头，用以判断实际发送的请求是否安全。</p></blockquote><h2 id="post-和-get-的区别" tabindex="-1">Post 和 Get 的区别 <a class="header-anchor" href="#post-和-get-的区别" aria-label="Permalink to &quot;Post 和 Get 的区别&quot;">​</a></h2><p>先引入副作用和幂等的概念。</p><p>副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p><p>幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。</p><p>在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。</p><p>在技术上说：</p><ul><li>Get 请求能缓存，Post 不能</li><li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。</li><li>Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术</li><li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul><h2 id="常见的四种post提交数据编码格式" tabindex="-1">常见的四种post提交数据编码格式 <a class="header-anchor" href="#常见的四种post提交数据编码格式" aria-label="Permalink to &quot;常见的四种post提交数据编码格式&quot;">​</a></h2><p>服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p><ul><li>1.application/x-www-form-urlencoded 最常见的 POST 提交数据的方式。浏览器的原生 form 表单，如果不设置 enctype属性，那么最终就会默认以 <code>application/x-www-form-urlencoded </code>方式提交数据。</li></ul><p>在POST提交数据中Content-Type 被指定为 application/x-www-form-urlencoded；提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。很多时候，我们用 Ajax 提交数据时，也是使用这种方式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/x-www-form-urlencoded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>2.multipart/form-data</li></ul><p>使用表单上传文件时，必须让 form 的 enctype 等于这个值。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。上面提到的这两种 POST 数据的方式，都是浏览器原生支持的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multipart/form-data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>3.application/json</li></ul><p>用来告诉服务端消息主体是序列化后的 JSON 字符串。</p><ul><li>4.text/xml</li></ul><h3 id="axios的content-type" tabindex="-1">axios的Content-type <a class="header-anchor" href="#axios的content-type" aria-label="Permalink to &quot;axios的Content-type&quot;">​</a></h3><p>是自动设置的</p><p>在 <code>transformRequest</code> 里 <code>defaults.transformRequest</code>，判断了<code>URL</code>（URLSearchParams ）和 data 为普通对象时<code>object</code>，分别自动设置了<code>application/x-www-form-urlencoded;charset=utf-8</code>,<code>application/json;charset=utf-8</code> 这里的自动设置是没有Content-Type的时候才设置，当你在之前已经设置了Content-Type这里是不会自动设置的</p><p>而 <code>multipart/form-data</code> 是 发送ajax之前 <code>xhrAdapter</code> 里， 判断是否是 FormData如果是就删除Content-Type这个 key，因为浏览器会自动的设置。 这里的设置是强制的，只要你的 data 是 FormData 就会删掉 Content-Type，所以拦截器中打印<code>config.headers[&#39;Content-Type&#39;]</code>就是undefined</p><p>拦截器request -&gt; 拦截器request -&gt; ... -&gt; dispatchRequest -&gt; 拦截器response -&gt; ... 自动设置是在 dispatchRequest 里的，在拦截器request之后</p><h3 id="简单请求与复杂请求" tabindex="-1"><a href="https://cloud.tencent.com/developer/article/1467364" target="_blank" rel="noreferrer">简单请求与复杂请求</a> <a class="header-anchor" href="#简单请求与复杂请求" aria-label="Permalink to &quot;[简单请求与复杂请求](https://cloud.tencent.com/developer/article/1467364)&quot;">​</a></h3><blockquote><p>作用：跨域资源共享（简称cors，后面使用简称）来解决跨域问题，但是在使用cors的时候，http请求会被划分为两类，简单请求和复杂请求，而这两种请求的区别主要在于是否会触发cors预检请求。</p></blockquote><blockquote><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <code>GET</code> 以外的 HTTP 请求，或者搭配某些 <code>MIME</code> 类型的 <code>POST</code> 请求），浏览器必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）</p></blockquote><p>从上面的文字中我们得到如下信息：</p><p>1、跨域资源共享标准新增了一组 HTTP 首部字段，服务器通过这些字段来控制浏览器有权访问哪些资源。</p><p>2、为了安全起见请求方式分为两类，一类不会预先发送<code>options</code>请求，一些会预先发送<code>options</code>请求。</p><p>3、 <code>GET</code> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <code>POST</code> 请求会触发<code>options</code>请求。</p><p>4、服务器验证OPTIONS完成后才会允许发送实际的http请求。</p><p>不会触发http预检请求的便是简单请求，能够触发http预检请求的便是复杂请求。</p><p>简单请求定义</p><ul><li><p>1、使用下列方法之一：</p><p>GET、</p><p>POST、</p><p>HEAD。</p></li><li><p>2、不得人为设置该集合之外的其他首部字段。该集合为：</p><p>Accept</p><p>Accept-Language</p><p>Content-Language</p><p>Content-Type</p></li><li><p>3、Content-Type 的值仅限于下列三者之一：</p><p>text/plain</p><p>multipart/form-data</p><p>application/x-www-form-urlencoded</p></li><li><p>4、请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问</p></li><li><p>5、请求中没有使用 ReadableStream 对象</p></li></ul><p>那什么是复杂请求呢，除了简单请求都是复杂请求。</p><p>简单请求的发送从代码上来看和普通的XHR没太大区别，但是HTTP头当中要求总是包含一个域（Origin）的信息。该域包含协议名、地址以及一个可选的端口。不过这一项实际上由浏览器代为发送，并不是开发者代码可以触及到的。</p><p>简单请求的部分响应头及解释如下：</p><p>Access-Control-Allow-Origin（必含）- 不可省略，否则请求按失败处理。该项控制数据的可见范围，如果希望数据对任何人都可见，可以填写&quot;*&quot;。</p><p>Access-Control-Allow-Credentials（可选） – 该项标志着请求当中是否包含cookies信息，只有一个可选值：true（必为小写）。如果不包含cookies，请略去该项，而不是填写false。这一项与XmlHttpRequest2对象当中的withCredentials属性应保持一致，即withCredentials为true时该项也为true；withCredentials为false时，省略该项不写。反之则导致请求失败。</p><p>Access-Control-Expose-Headers（可选） – 该项确定XmlHttpRequest2对象当中getResponseHeader()方法所能获得的额外信息。通常情况下，getResponseHeader()方法只能获得如下的信息：</p><p>Cache-Control</p><p>Content-Language</p><p>Content-Type</p><p>Expires</p><p>Last-Modified</p><p>Pragma</p><p>当你需要访问额外的信息时，就需要在这一项当中填写并以逗号进行分隔</p><p>任何不满足上述简单请求要求的请求，都属于复杂请求。比如说你需要发送<code>PUT</code>、<code>DELETE</code>等HTTP动作，或者发送<code>Content-Type: application/json</code>的内容。</p><p>复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种&quot;预请求&quot;，此时作为服务端，也需要返回&quot;预回应&quot;作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。</p><p>预请求以<code>OPTIONS</code>形式发送，当中同样包含域，并且还包含了两项<code>CORS</code>特有的内容</p><ol><li>Access-Control-Request-Method – 该项内容是实际请求的种类，可以是GET、POST之类的简单请求，也可以是PUT、DELETE等等。</li><li>Access-Control-Request-Headers – 该项是一个以逗号分隔的列表，当中是复杂请求所使用的头部。</li></ol><p>显而易见，这个预请求实际上就是在为之后的实际请求发送一个权限请求，在预回应返回的内容当中，服务端应当对这两项进行回复，以让浏览器确定请求是否能够成功完成。</p><p>复杂请求的部分响应头及解释如下：</p><p>Access-Control-Allow-Origin（必含） – 和简单请求一样的，必须包含一个域。</p><p>Access-Control-Allow-Methods（必含） – 这是对预请求当中Access-Control-Request-Method的回复，这一回复将是一个以逗号分隔的列表。尽管客户端或许只请求某一方法，但服务端仍然可以返回所有允许的方法，以便客户端将其缓存。</p><p>Access-Control-Allow-Headers（当预请求中包含Access-Control-Request-Headers时必须包含） – 这是对预请求当中Access-Control-Request-Headers的回复，和上面一样是以逗号分隔的列表，可以返回所有支持的头部。这里在实际使用中有遇到，所有支持的头部一时可能不能完全写出来，而又不想在这一层做过多的判断，没关系，事实上通过request的header可以直接取到Access-Control-Request-Headers，直接把对应的value设置到Access-Control-Allow-Headers即可。</p><p>Access-Control-Allow-Credentials（可选） – 和简单请求当中作用相同</p><p>Access-Control-Max-Age（可选） – 以秒为单位的缓存时间。预请求的的发送并非免费午餐，允许时应当尽可能缓存。</p><h2 id="http状态码" tabindex="-1">HTTP状态码 <a class="header-anchor" href="#http状态码" aria-label="Permalink to &quot;HTTP状态码&quot;">​</a></h2><p>HTTP 状态码为 3 位数，被归为 5 类：</p><ul><li>1XX：Information(信息性状态码-收到的请求正在处理)表示目前是协议处理的中间状态，还需要后续操作。</li><li>2XX：Success（成功状态码，请求正常处理完毕）表示成功状态。</li><li>3XX：Redirection（重定向状态码-需要进行附加操作已完成请求）重定向状态，资源位置发生变动，需要重新请求。</li><li>4XX：Clint Error（客户端错误请求码-服务器无法处理请求）请求报文有误。</li><li>5XX：Server Error(服务器错误状态码-服务器处理请求出错)服务器端发生错误。</li></ul><p>101 Switching Protocols：在 HTTP 升级为 WebSocket 的时候，如果服务器同意变更，就会发送状态码为 101。</p><p><strong>2XX 成功</strong></p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li><li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li><li>206 Partial Content：表示部分内容请求成功。使用场景为 HTTP 分块下载和断点续传，当然也会带上相应的响应头字段 Content-Range。</li></ul><p><strong>3XX 重定向</strong></p><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL，HTTP 升级 HTTPS，之前站点再也不用，那就是 301。</li><li>302 not Found, Moved Temporarily，临时性重定向，表示资源临时被分配了新的 URL，302 用来做临时跳转, 比如未登陆的用户访问用户中心被重定向到登录页面</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li><li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况, 当命中协商缓存时会返回这个状态码。</li><li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li></ul><p><strong>4XX 客户端错误</strong></p><ul><li>400 bad request，请求报文存在语法错误，请求无效。通常为前后端数据格式不一致或者其他原因。</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝，服务器已经得到请求，但是拒绝执行，比如没权限、法律禁止等。</li><li>404 not found，表示在服务器上没有找到请求的资源</li><li>405 Method Not Allowed，服务器禁止使用该方法，客户端可以通过options方法来查看服务器允许的访问方法，如下</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Access-Control-Allow-Methods →GET,HEAD,PUT,PATCH,POST,DELETE</span></span></code></pre></div><p><strong>5XX 服务器错误</strong></p><ul><li>500 Internal Server Error：服务器报错，有些时候可以在 Response 看到后端 PHP 等技术的报错信息等。</li><li>502 Bad Gateway：服务器正常，但是访问出错。服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503 Service Unavailable：服务器繁忙或者停机维护，暂时无法处理请求。</li><li>504 Gateway Timeout：服务器作为网关或代理，但是没有及时从上游服务器收到请求。502是代理服务器后面的真实服务器节点配置出了问题或者已经挂掉了，而504是代理服务器后面的真实服务器已经过载，它要处理的请求报文实在太多，忙不过来了，打个比喻，502是你呼叫对方要东西，联系上了对方，但东西不能及时给你；504是你呼叫对方要东西，联系不上对方</li></ul><h2 id="http-首部" tabindex="-1">HTTP 首部 <a class="header-anchor" href="#http-首部" aria-label="Permalink to &quot;HTTP 首部&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">通用字段</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">Cache-Control</td><td style="text-align:center;">控制缓存的行为</td></tr><tr><td style="text-align:center;">Connection</td><td style="text-align:center;">浏览器想要优先使用的连接类型，比如 <code>keep-alive</code></td></tr><tr><td style="text-align:center;">Date</td><td style="text-align:center;">创建报文时间</td></tr><tr><td style="text-align:center;">Pragma</td><td style="text-align:center;">报文指令</td></tr><tr><td style="text-align:center;">Via</td><td style="text-align:center;">代理服务器相关信息</td></tr><tr><td style="text-align:center;">Transfer-Encoding</td><td style="text-align:center;">传输编码方式</td></tr><tr><td style="text-align:center;">Upgrade</td><td style="text-align:center;">要求客户端升级协议</td></tr><tr><td style="text-align:center;">Warning</td><td style="text-align:center;">在内容中可能存在错误</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">请求字段</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">Accept</td><td style="text-align:center;">能正确接收的媒体类型</td></tr><tr><td style="text-align:center;">Accept-Charset</td><td style="text-align:center;">能正确接收的字符集</td></tr><tr><td style="text-align:center;">Accept-Encoding</td><td style="text-align:center;">能正确接收的编码格式列表</td></tr><tr><td style="text-align:center;">Accept-Language</td><td style="text-align:center;">能正确接收的语言列表</td></tr><tr><td style="text-align:center;">Expect</td><td style="text-align:center;">期待服务端的指定行为</td></tr><tr><td style="text-align:center;">From</td><td style="text-align:center;">请求方邮箱地址</td></tr><tr><td style="text-align:center;">Host</td><td style="text-align:center;">服务器的域名</td></tr><tr><td style="text-align:center;">If-Match</td><td style="text-align:center;">两端资源标记比较</td></tr><tr><td style="text-align:center;">If-Modified-Since</td><td style="text-align:center;">本地资源未修改返回 304（比较时间）</td></tr><tr><td style="text-align:center;">If-None-Match</td><td style="text-align:center;">本地资源未修改返回 304（比较标记）</td></tr><tr><td style="text-align:center;">User-Agent</td><td style="text-align:center;">客户端信息</td></tr><tr><td style="text-align:center;">Max-Forwards</td><td style="text-align:center;">限制可被代理及网关转发的次数</td></tr><tr><td style="text-align:center;">Proxy-Authorization</td><td style="text-align:center;">向代理服务器发送验证信息</td></tr><tr><td style="text-align:center;">Range</td><td style="text-align:center;">请求某个内容的一部分</td></tr><tr><td style="text-align:center;">Referer</td><td style="text-align:center;">表示浏览器所访问的前一个页面</td></tr><tr><td style="text-align:center;">TE</td><td style="text-align:center;">传输编码方式</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">响应字段</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">Accept-Ranges</td><td style="text-align:center;">是否支持某些种类的范围</td></tr><tr><td style="text-align:center;">Age</td><td style="text-align:center;">资源在代理缓存中存在的时间</td></tr><tr><td style="text-align:center;">ETag</td><td style="text-align:center;">资源标识</td></tr><tr><td style="text-align:center;">Location</td><td style="text-align:center;">客户端重定向到某个 URL</td></tr><tr><td style="text-align:center;">Proxy-Authenticate</td><td style="text-align:center;">向代理服务器发送验证信息</td></tr><tr><td style="text-align:center;">Server</td><td style="text-align:center;">服务器名字</td></tr><tr><td style="text-align:center;">WWW-Authenticate</td><td style="text-align:center;">获取资源需要的验证信息</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:center;">实体字段</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">Allow</td><td style="text-align:center;">资源的正确请求方式</td></tr><tr><td style="text-align:center;">Content-Encoding</td><td style="text-align:center;">内容的编码格式</td></tr><tr><td style="text-align:center;">Content-Language</td><td style="text-align:center;">内容使用的语言</td></tr><tr><td style="text-align:center;">Content-Length</td><td style="text-align:center;">request body 长度</td></tr><tr><td style="text-align:center;">Content-Location</td><td style="text-align:center;">返回数据的备用地址</td></tr><tr><td style="text-align:center;">Content-MD5</td><td style="text-align:center;">Base64加密格式的内容 MD5检验值</td></tr><tr><td style="text-align:center;">Content-Range</td><td style="text-align:center;">内容的位置范围</td></tr><tr><td style="text-align:center;">Content-Type</td><td style="text-align:center;">内容的媒体类型</td></tr><tr><td style="text-align:center;">Expires</td><td style="text-align:center;">内容的过期时间</td></tr><tr><td style="text-align:center;">Last_modified</td><td style="text-align:center;">内容的最后修改时间</td></tr></tbody></table><h1 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h1><p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p><h2 id="tls" tabindex="-1">TLS <a class="header-anchor" href="#tls" aria-label="Permalink to &quot;TLS&quot;">​</a></h2><p>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。</p><p>在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。</p><p><strong>对称加密</strong>：</p><p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p><p><strong>非对称加密</strong>：</p><p>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p><p><strong>TLS 握手过程如下图：</strong></p><p><img src="`+u+'" alt=""></p><ol><li>客户端发送一个随机值，需要的协议和加密方式</li><li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）</li><li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li><li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li></ol><p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p><p>PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。</p><h1 id="http-2-0" tabindex="-1">HTTP 2.0 <a class="header-anchor" href="#http-2-0" aria-label="Permalink to &quot;HTTP 2.0&quot;">​</a></h1><p>HTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。</p><p>在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p><p>你可以通过 <a href="https://http2.akamai.com/demo" target="_blank" rel="noreferrer">该链接</a> 感受下 HTTP 2.0 比 HTTP 1.X 到底快了多少。</p><p><img src="'+T+'" alt=""></p><p>在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的</p><p><img src="'+P+'" alt=""></p><p>在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的</p><p><img src="'+k+'" alt=""></p><h2 id="二进制传输" tabindex="-1">二进制传输 <a class="header-anchor" href="#二进制传输" aria-label="Permalink to &quot;二进制传输&quot;">​</a></h2><p>HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p><p><img src="'+f+'" alt=""></p><h2 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-label="Permalink to &quot;多路复用&quot;">​</a></h2><p>在 HTTP 2.0 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。</p><p>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</p><p>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p><p><img src="'+x+'" alt=""></p><h2 id="header-压缩" tabindex="-1">Header 压缩 <a class="header-anchor" href="#header-压缩" aria-label="Permalink to &quot;Header 压缩&quot;">​</a></h2><p>在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p><p>在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p><h2 id="服务端-push" tabindex="-1">服务端 Push <a class="header-anchor" href="#服务端-push" aria-label="Permalink to &quot;服务端 Push&quot;">​</a></h2><p>在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。</p><p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。</p><h2 id="quic" tabindex="-1">QUIC <a class="header-anchor" href="#quic" aria-label="Permalink to &quot;QUIC&quot;">​</a></h2><p>这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 TCP 协议。</p><ul><li>该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头阻塞的问题，但是 UDP 没有这个机制</li><li>实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然 TLS 1.3 已经实现了 0-RTT 了</li><li>支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用纠错机制恢复丢失的包 <ul><li>纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包</li><li>在丢失两个包或以上的情况就使用重传机制，因为算不出来了</li></ul></li></ul><h2 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h2><p>DNS 的作用就是通过域名查询到具体的 IP。</p><p><img src="'+C+'" alt=""></p><p>一般向本地DNS服务器发送请求是<strong>递归查询</strong>的，本地 DNS 服务器向其他域名服务器请求的过程是<strong>迭代查询</strong>的过程</p><p><img src="'+b+'" alt=""></p><p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。</p><p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 <code>www.google.com</code> 时，会进行一下操作：</p><ol><li>操作系统会首先在本地缓存中查询</li><li>没有的话会去系统配置的 DNS 服务器中查询</li><li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 <code>com</code> 这个一级域名的服务器</li><li>然后去该服务器查询 <code>google</code> 这个二级域名</li><li>接下来三级域名的查询其实是我们配置的，你可以给 <code>www</code> 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li></ol><p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p><p>PS：DNS 是基于 UDP 做的查询。</p><h2 id="cdn" tabindex="-1"><a href="https://juejin.cn/post/6844903605888090125" target="_blank" rel="noreferrer">CDN</a> <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;[CDN](https://juejin.cn/post/6844903605888090125)&quot;">​</a></h2><h2 id="浏览器缓存机制" tabindex="-1"><a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651556794&amp;idx=1&amp;sn=0186d0c4b36b6e7e0adf7ffaf7b3f9b8&amp;chksm=80255c7bb752d56dd863bdc90295b6bf193612ef5b26e96d13f9165c8beb32125f5facc7fe31&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">浏览器缓存机制</a> <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;[浏览器缓存机制](https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651556794&amp;idx=1&amp;sn=0186d0c4b36b6e7e0adf7ffaf7b3f9b8&amp;chksm=80255c7bb752d56dd863bdc90295b6bf193612ef5b26e96d13f9165c8beb32125f5facc7fe31&amp;scene=21#wechat_redirect)&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903747357769742" target="_blank" rel="noreferrer">一文读懂前端缓存</a></li></ul><p>浏览的缓存策略分为强缓存和协商缓存，他们之间的根本区别是是否需要发请求。简单来说，强缓存就是你的本地文件（保存在硬盘或者内存中），你可以立马访问到；协商缓存是需要发请求给服务器，问问资源是否有更新，如果没有更新就访问本地缓存；如果更新，服务器会返回更新后的资源文件。</p><p><strong>强缓存</strong> --- HTTP/1.0: 响应头中 <code>Expires</code> 字段(有问题，相对于本地实际)， HTTP/1.1： <code>Cache-Control</code>字段</p><p><strong>协商缓存</strong> --- HTTP/1.0 中的 <code>Last-Modified</code>(Last-Modified 验证规则：浏览器第一次发送请求，服务器在响应头中带上 Last-Modified，并返回资源，浏览器下次发送相同请求时，会把之前收到的 Last-Modified 内容放到请求头中的 If-Modified-Since 字段，服务器收到后会跟请求资源的最后修改时间做对比，如果相同，返回 HTTP 304，如果不相同，返回HTTP 200，并返回最新的资源。) HTTP/1.1: <code>E-Tag</code> 验证规则：验证过程跟 Last-Modified 类似，只不过是浏览器第一次收到的是 etag，第二次发送的是 If-None-Match。跟 Last-Modified 的区别是 E-Tag 的内容是资源的唯一标识符，Last-Modified 的内容是最后修改时间，且 E-Tag 优先级高于 Last-Modified。</p><p>Nginx 中 ETag 由响应头的<code>Last-Modified</code>和<code>Content-Length</code>表示为十六进制组合而成。</p><table tabindex="0"><thead><tr><th>用户操作</th><th>Last-Modified/ETag</th><th>Cache-Control/Expires</th></tr></thead><tbody><tr><td>URI地址回车</td><td>有效</td><td>有效</td></tr><tr><td>页面链接跳转</td><td>有效</td><td>有效</td></tr><tr><td>新建页面</td><td>有效</td><td>有效</td></tr><tr><td>前进后退</td><td>有效</td><td>有效</td></tr><tr><td>F5刷新</td><td>无效</td><td>有效</td></tr><tr><td>Ctrl+F5强制刷新</td><td>无效</td><td>无效</td></tr><tr><td>同时存在</td><td>优先级低</td><td>优先级高</td></tr></tbody></table><p><img src="'+m+'" alt=""></p><h2 id="从输入-url-到页面加载完成的过程" tabindex="-1">从输入 URL 到页面加载完成的过程 <a class="header-anchor" href="#从输入-url-到页面加载完成的过程" aria-label="Permalink to &quot;从输入 URL 到页面加载完成的过程&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/190320054" target="_blank" rel="noreferrer">好文章</a></p><ol><li>首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</li><li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li><li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</li><li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</li><li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li><li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li><li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 <code>script</code> 标签的话，会判断是否存在 <code>async</code> 或者 <code>defer</code> ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li><li>初始的 HTML 被完全加载和解析后会触发 <code>DOMContentLoaded</code> 事件</li><li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li><li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</li></ol>',258)]))}const L=e(y,[["render",q]]);export{D as __pageData,L as default};
