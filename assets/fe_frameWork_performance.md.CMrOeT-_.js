import{_ as a,c as i,o as l,ag as p}from"./chunks/framework.BgId8OS5.js";const m=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{"title":"前端性能优化"},"headers":[],"relativePath":"fe/frameWork/performance.md","filePath":"fe/frameWork/performance.md","lastUpdated":1683123759000}'),r={name:"fe/frameWork/performance.md"};function t(o,e,n,s,d,c){return l(),i("div",null,e[0]||(e[0]=[p('<ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MjY3OTgwMA==&amp;mid=2652484881&amp;idx=1&amp;sn=18baf4dd44cb896ae767322451424729&amp;chksm=bd4f87068a380e10e366b16d9a374cd1e9c6b3acf076ada387cb62367c89d8a0673e98f31693&amp;cur_album_id=1564396246507847682&amp;scene=189#wechat_redirect" target="_blank" rel="noreferrer">Web性能评价指标</a></li><li><a href="https://juejin.cn/post/6892994632968306702" target="_blank" rel="noreferrer">前端性能优化 24 条建议</a></li><li><a href="https://juejin.cn/post/6932647134944886797" target="_blank" rel="noreferrer">Web 用户体验设计提升指南</a></li></ul><p>一个网站加载性能如何主要看白屏时间和首屏时间。</p><p>白屏时间：指从输入网址，到页面开始显示内容的时间。</p><p>首屏时间：指从输入网址，到页面完全渲染的时间。</p><h2 id="前端指标" tabindex="-1">前端指标 <a class="header-anchor" href="#前端指标" aria-label="Permalink to &quot;前端指标&quot;">​</a></h2><ol><li><p>FP，First Paint。是页面导航与浏览器将该网页的第一个像素渲染到屏幕上所用的中间时，渲染是任何与输入网页导航前的屏幕上的内容不同的内容。背景色会很快完成绘制</p></li><li><p>FCP，First Contentful Paint。当页面绘制完第一个 DOM 内容，会触发首屏，这里的内容可以是文字、图片或者是 canvas。</p></li><li><p>FMP，First Meaning Paint。首次有效绘制。这是一个很主观的指标。根据业务的不同，每一个网站的有效内容都是不相同的，有效内容就是网页中&quot;主角元素&quot;。对于视频网站而言，主角元素就是视频。对于搜索引擎而言，主角元素就是搜索框。</p></li><li><p>ATF，Above The Fold，首屏时间</p></li><li><p>TTI，Time To Interact，首次交互时间，可以用DomReady时间。可交互时间。用于标记应用已进行视觉渲染并能可靠响应用户输入的时间点。应用可能会因为多种原因而无法响应用户输入：①页面组件运行所需的JavaScript尚未加载完成。②耗时较长的任务阻塞主线程</p></li><li><p>资源总下载时间。Load时间 &gt;= DomContentLoaded时间</p></li></ol><p>（1）Dom加载完时间，DomContentLoaded。</p><p>（2）页面资源加载完时间，Load，包括图片，音视频等异步资源。但是资源加载完之后，页面还没有完全稳定，完全稳定的时间由finish决定。</p><ol start="7"><li><p>服务端重要接口加载速度。</p></li><li><p>客户端启动容器（WebView）时间。</p></li></ol><h2 id="优化方向" tabindex="-1">优化方向 <a class="header-anchor" href="#优化方向" aria-label="Permalink to &quot;优化方向&quot;">​</a></h2><p>前端性能优化分为两个方向，一是工程化方向，另一个是细节方向。</p><h3 id="工程化方向" tabindex="-1">工程化方向 <a class="header-anchor" href="#工程化方向" aria-label="Permalink to &quot;工程化方向&quot;">​</a></h3><ol><li><p>客户端Gzip离线包，服务器资源Gzip压缩。</p></li><li><p>JS瘦身，Tree shaking，ES Module，动态Import，动态Polyfill。</p></li><li><p>图片加载优化，Webp，考虑兼容性，可以提前加载一张图片，嗅探是否支持Webp。</p></li><li><p>延迟加载不用长内容。通过打点，看某些弹窗内或者子内容是否要初始化加载。</p></li><li><p>服务端渲染，客户端预渲染。</p></li><li><p>CDN静态资源</p></li><li><p>Webpack Dll，通用优先打包抽离，利用浏览器缓存。</p></li><li><p>骨架图</p></li><li><p>数据预取，包括接口数据，和加载详情页图片。</p></li><li><p>Webpack本身提供的优化，Base64，资源压缩，Tree shaking，拆包chunk。</p></li><li><p>减少重定向。</p></li></ol><h3 id="细节方向" tabindex="-1">细节方向 <a class="header-anchor" href="#细节方向" aria-label="Permalink to &quot;细节方向&quot;">​</a></h3><ol><li><p>图片，图片占位，图片懒加载。 雪碧图</p></li><li><p>使用 prefetch / preload 预加载等新特性</p></li><li><p>服务器合理设置缓存策略</p></li><li><p>async（加载完当前js立即执行）/defer(所有资源加载完之后执行js)</p></li><li><p>减少Dom的操作，减少重排重绘</p></li><li><p>从客户端层面，首屏减少和客户端交互，合并接口请求。</p></li><li><p>数据缓存。</p></li><li><p>首页不加载不可视组件。</p></li><li><p>防止渲染抖动，控制时序。</p></li><li><p>减少组件层级。</p></li><li><p>优先使用Flex布局。</p></li></ol><h3 id="卡顿问题解决" tabindex="-1">卡顿问题解决 <a class="header-anchor" href="#卡顿问题解决" aria-label="Permalink to &quot;卡顿问题解决&quot;">​</a></h3><ol><li><p>CSS动画效率比JS高，css可以用GPU加速，3d加速。如果非要用JS动画，可以用requestAnimationFrame。</p></li><li><p>批量进行DOM操作，固定图片容器大小，避免屏幕抖动。</p></li><li><p>减少重绘重排。</p></li><li><p>节流和防抖。</p></li><li><p>减少临时大对象产生，利用对象缓存，主要是减少内存碎片。</p></li><li><p>异步操作，IntersectionObserver，PostMessage，RequestIdleCallback。</p></li></ol><h3 id="性能优化api" tabindex="-1">性能优化API <a class="header-anchor" href="#性能优化api" aria-label="Permalink to &quot;性能优化API&quot;">​</a></h3><ol><li><p>Performance。performance.now()与new Date()区别，它是高精度的，且是相对时间，相对于页面加载的那一刻。但是不一定适合单页面场景。</p></li><li><p>window.addEventListener(&quot;load&quot;, &quot;&quot;); window.addEventListener(&quot;domContentLoaded&quot;, &quot;&quot;);</p></li><li><p>Img的onload事件，监听首屏内的图片是否加载完成，判断首屏事件。</p></li><li><p>RequestFrameAnmation 和 RequestIdleCallback。</p></li><li><p>IntersectionObserver、MutationObserver，PostMessage。</p></li><li><p>Web Worker，耗时任务放在里面执行。</p></li></ol><h3 id="检测工具" tabindex="-1">检测工具 <a class="header-anchor" href="#检测工具" aria-label="Permalink to &quot;检测工具&quot;">​</a></h3><ol><li><p>Chrome Dev Tools</p></li><li><p>Page Speed</p></li><li><p>Jspref</p></li></ol><h3 id="首屏优化" tabindex="-1">首屏优化 <a class="header-anchor" href="#首屏优化" aria-label="Permalink to &quot;首屏优化&quot;">​</a></h3><h4 id="crp" tabindex="-1"><a href="https://juejin.cn/post/6844903757038223367" target="_blank" rel="noreferrer">CRP</a> <a class="header-anchor" href="#crp" aria-label="Permalink to &quot;[CRP](https://juejin.cn/post/6844903757038223367)&quot;">​</a></h4><p>CRP： 即<strong>关键渲染路径</strong> (Critical Rendering Path)， 关键渲染路径是浏览器将 HTML CSS JavaScript 转换为在屏幕上呈现的像素内容所经历的一系列步骤。</p>',24)]))}const u=a(r,[["render",t]]);export{m as __pageData,u as default};
