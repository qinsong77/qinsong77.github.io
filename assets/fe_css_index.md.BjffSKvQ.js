import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.BgId8OS5.js";const l="/assets/content_box.CLV2hT9T.png",n="/assets/box-sizing.zNgAAsjF.png",h="/assets/inherit.Cw4Gp7C1.png",p="/assets/z-index.D69YznWx.png",o="/assets/getBoundingClient.DYCBmU07.png",r="/assets/ele_center.sX8ssnMa.png",k="/assets/css_layout1.BKDvPNbE.jpg",d="/assets/css_layout2.DMyPaN2T.jpg",C=JSON.parse('{"title":"Summary","description":"","frontmatter":{},"headers":[],"relativePath":"fe/css/index.md","filePath":"fe/css/index.md","lastUpdated":1732467123000}'),c={name:"fe/css/index.md"};function g(E,i,y,m,u,F){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h1><h2 id="文章汇总" tabindex="-1">文章汇总 <a class="header-anchor" href="#文章汇总" aria-label="Permalink to &quot;文章汇总&quot;">​</a></h2><hr><h4 id="_104-个-css-面试题" tabindex="-1"><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTY2MjgyNw==&amp;mid=2247484449&amp;idx=2&amp;sn=0a36d89eb75fcf3bd09ff5db2996cfa1&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">104 个 CSS 面试题</a> <a class="header-anchor" href="#_104-个-css-面试题" aria-label="Permalink to &quot;[104 个 CSS 面试题](https://mp.weixin.qq.com/s?__biz=Mzg2OTY2MjgyNw==&amp;mid=2247484449&amp;idx=2&amp;sn=0a36d89eb75fcf3bd09ff5db2996cfa1&amp;source=41#wechat_redirect)&quot;">​</a></h4><h4 id="css-晦涩难懂的点" tabindex="-1"><a href="https://juejin.cn/post/6888102016007176200" target="_blank" rel="noreferrer">css 晦涩难懂的点</a> <a class="header-anchor" href="#css-晦涩难懂的点" aria-label="Permalink to &quot;[css 晦涩难懂的点](https://juejin.cn/post/6888102016007176200)&quot;">​</a></h4><h4 id="web-开发者应该掌握的-css-tricks" tabindex="-1"><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/" target="_blank" rel="noreferrer">Web 开发者应该掌握的 CSS tricks</a> <a class="header-anchor" href="#web-开发者应该掌握的-css-tricks" aria-label="Permalink to &quot;[Web 开发者应该掌握的 CSS tricks](https://lhammer.cn/You-need-to-know-css/#/zh-cn/)&quot;">​</a></h4><h4 id="前端-demo-以及基础的效果-css3-简单的动画特效" tabindex="-1"><a href="http://codehtml.cn/front-end-demo/#/" target="_blank" rel="noreferrer">前端 DEMO 以及基础的效果，CSS3 简单的动画特效</a> <a class="header-anchor" href="#前端-demo-以及基础的效果-css3-简单的动画特效" aria-label="Permalink to &quot;[前端 DEMO 以及基础的效果，CSS3 简单的动画特效](http://codehtml.cn/front-end-demo/#/)&quot;">​</a></h4><h4 id="你未必知道的-49-个-css-知识点" tabindex="-1"><a href="https://juejin.im/post/6844903902123393032" target="_blank" rel="noreferrer">你未必知道的 49 个 CSS 知识点</a> <a class="header-anchor" href="#你未必知道的-49-个-css-知识点" aria-label="Permalink to &quot;[你未必知道的 49 个 CSS 知识点](https://juejin.im/post/6844903902123393032)&quot;">​</a></h4><h4 id="从网易与淘宝的-font-size-思考前端设计稿与工作流" tabindex="-1"><a href="https://www.cnblogs.com/lyzg/p/4877277.html" target="_blank" rel="noreferrer">从网易与淘宝的 font-size 思考前端设计稿与工作流</a> <a class="header-anchor" href="#从网易与淘宝的-font-size-思考前端设计稿与工作流" aria-label="Permalink to &quot;[从网易与淘宝的 font-size 思考前端设计稿与工作流](https://www.cnblogs.com/lyzg/p/4877277.html)&quot;">​</a></h4><ul><li><a href="#盒模型">盒模型</a></li><li><a href="#优先级">优先级</a></li><li><a href="#定位position">定位 position</a></li><li><a href="#css的层叠上下文">CSS 的层叠上下文</a></li><li><a href="#伪类和伪元素">伪类和伪元素</a></li><li><a href="#img-是什么元素">img 是什么元素</a></li><li><a href="#em-rem">px,em,rem</a></li><li><a href="#line-height-1-5和line-height-150-的区别">line-height:1.5 和 line-height:150%的区别</a></li><li><a href="#比较-opacity-0、visibility-hidden、display-none-优劣和适用场景">比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</a></li><li><a href="#css实现文本的单行和多行溢出省略效果">CSS 实现文本的单行和多行溢出省略效果</a></li><li><a href="#垂直居中和常见布局">垂直居中和常见布局</a></li><li><a href="#css样式管理方案">css 样式管理方案</a></li></ul><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><p>组成：盒模型由内容区域 content、内边距 padding、边框 border、外边距 margin 四部分组成。</p><p>实际大小：盒模型实际大小由内容区域、内边距、边框三部分组成，css 设置<code>width</code>和<code>height</code>是对盒子内容区域设置的。</p><p><code>box-sizing</code>属性：</p><ul><li>W3C 标准盒模型（content-box）: width 和 height 指的是<strong>内容区域的宽度和高度</strong>。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。一个块的总宽度= width + padding(左右) + border(左右);</li><li>IE（怪异）盒模型（border-box）：border、padding 的设置不会影响元素的宽高，那么 css 给盒子设置的<code>width</code>和<code>height</code>属性就等于盒模型的实际大小（包括内容区域、内边距、边框）; <img src="'+l+'" alt=""><img src="'+n+`" alt=""></li></ul><p><code>border-color</code> 默认颜色就是 color 色值。具体来讲，就是当没有指定<code>border-color</code>颜色值的时候，会使用当前元素的 color 计算值作为边框色。具有类似特性的 CSS 属性还有 <code>outline</code>、<code>box-shadow</code> 和 <code>text-shadow </code>等。</p><p>当<code>margin</code>和<code>padding</code>的值设置为百分比时，是指相对于最近的块级父元素 width（非总宽度）的相应百分比的值，即使是 margin-top、margin-bottom、padding-top、padding-bottom，设置为百分比时也是以最近块级父元素的 width（非总宽度）为基准，而非 height。</p><p>请写出 inner 的实际内容高度。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    padding-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;outer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>inner 的实际内容高度为 60px，未设置<code>box-sizing</code>为<code>border-box</code>，<code>padding-top</code>百分比取父元素宽的 20%为 40px，内容高度为 60px。box-sizing 为 border-box 时内容高度是 20px。</p><p><img src="`+h+'" alt=""></p><h4 id="javascript-如何设置获取盒模型对应的宽和高" tabindex="-1">javascript 如何设置获取盒模型对应的宽和高 <a class="header-anchor" href="#javascript-如何设置获取盒模型对应的宽和高" aria-label="Permalink to &quot;javascript 如何设置获取盒模型对应的宽和高&quot;">​</a></h4><ol><li><code>dom.style.width/height</code> 只能取到行内样式的宽和高，style 标签中和 link 外链的样式取不到。</li><li><code>dom.currentStyle.width/height</code> 取到的是最终渲染后的宽和高，只有 IE 支持此属性。</li><li><code>window.getComputedStyle(dom).width/height</code> 同（2）但是多浏览器支持，IE9 以上支持。返回的带单位的字符串<code>60px</code>。</li><li><code>dom.getBoundingClientRect().width/height</code> 也是得到渲染后的宽和高，大多浏览器支持。IE9 以上支持，除此外还可以取到相对于视窗的上下左右的距离。</li></ol><h3 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h3><p>定义 CSS 样式时，经常出现两个或更多选择器应用在同一元素上，此时，</p><ul><li>选择器相同，则执行层叠性（后者覆盖前者)</li><li>选择器不同，就会出现优先级的问题。</li></ul><h3 id="权重计算公式" tabindex="-1">权重计算公式 <a class="header-anchor" href="#权重计算公式" aria-label="Permalink to &quot;权重计算公式&quot;">​</a></h3><ul><li><code>!important;</code>最大</li><li>内联样式权重：1000</li><li>id 选择器权重：0100</li><li>类选择器，属性选择器（如<code>[type=&quot;number&quot;]</code>），伪类选择器（如:hove）权重：0010</li><li>元素选择器，伪元素选择器权重：0001</li><li>通配选择器 *，子选择器 &gt;，相邻选择器 +。权重：0000</li></ul><p>例子</p><ul><li><code>h1 + p::first-line</code>: 0,0,0,3</li><li><code>li &gt; a[href*=&quot;beige.world&quot;] &gt; .inline-warning</code>: 0,0,2,2</li></ul><h2 id="定位-position" tabindex="-1">定位 position <a class="header-anchor" href="#定位-position" aria-label="Permalink to &quot;定位 position&quot;">​</a></h2><ul><li><p><code>static</code> HTML 元素的默认值，即没有定位，遵循正常的文档流对象。静态定位的元素不会受到 top, bottom, left, right 影响。</p></li><li><p><code>relative</code> 相对定位元素的定位是相对其正常位置。移动相对定位元素，但它原本所占的空间不会改变。相对定位元素经常被用来作为绝对定位元素的容器块。</p></li><li><p><code>absolute</code> 绝对定位的元素的位置相对于最近的已定位父元素（除了 static 的父元素），如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>--<strong>错误，经过测试是相对于浏览器窗口</strong>: top, bottom, left, right 百分比写法是<strong>相对于父元素 box 的大小</strong>; absolute 定位使元素的位置与文档流无关，因此不占据空间。absolute 定位的元素和其他元素重叠。</p></li><li><p><code>fixed</code> 元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动：fixed 定位使元素的位置与文档流无关，因此不占据空间。 <code>fixed</code>定位的元素和其他元素重叠。</p></li><li><p><code>sticky</code> 粘性定位：position: sticky; 在目标区域以内，它的行为就像 <code>position:relative;</code>在滑动过程中，某个元素距离其父元素的距离达到<code>sticky</code>粘性定位的要求时(比如<code>top：100px</code>)；<code>position:sticky</code>这时的效果相当于<code>fixed</code>定位，固定到适当位置；</p></li></ul><p>元素定位表现为在跨越特定阈值（相对偏移）前为相对定位，之后为固定定位。</p><p>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于 viewport 来计算元素的偏移量。</p><p>这个特定阈值（相对偏移）指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p><p>使用条件：</p><ol><li><p>父元素不能<code>overflow:hidden</code>或者<code>overflow:auto</code>属性；</p></li><li><p>必须指定<code>top、bottom、left、right</code>4 个值之一，否则只会处于相对定位；</p></li><li><p>父元素的高度不能低于<code>sticky</code>元素的高度；</p></li><li><p>sticky 元素仅在其父元素内生效。</p></li></ol><p>特性（坑）：</p><ol><li><p>sticky 不会触发 BFC；</p></li><li><p>z-index 无效；</p></li><li><p>当父元素的 height：100%时，页面滑动到一定高度之后 sticky 属性会失效；</p></li><li><p>父元素不能有 overflow:hidden 或者 overflow:auto 属性；</p></li><li><p>父元素高度不能低于 sticky 高度，必须指定 top、bottom、left、right4 个值之一。</p></li></ol><ul><li>inherit 规定应该从父元素继承 position 属性的值。</li></ul><h2 id="css-的层叠上下文" tabindex="-1">CSS 的层叠上下文 <a class="header-anchor" href="#css-的层叠上下文" aria-label="Permalink to &quot;CSS 的层叠上下文&quot;">​</a></h2><p>层叠上下文是 HTML 中的一个三维的概念，每个层叠上下文中都有一套元素的层叠排列顺序。页面根元素天生具有层叠上下文，所以整个页面处于一个“层叠结界”中。</p><p>层叠上下文的创建：</p><ul><li>页面根元素：html</li><li>z-index 值为数值的定位元素</li><li>其他 css 属性 <ul><li>opacity 不是 1</li><li>transform 不是 none</li><li>flex，z-index 不是 auto</li></ul></li></ul><p>层叠上下文中的排列规则，从下到上：</p><p><img src="'+p+'" alt=""></p><ul><li>background/border</li><li>负 z-index</li><li>block 块状水平盒子</li><li>float 浮动盒子</li><li>inline 水平盒子</li><li>z-index:auto, 或看成 z-index:0</li><li>正 z-index 由此引申出：定位元素的<code>z-index：0</code>和<code>z-index：auto</code>的区别是，前者会创建层叠上下文，影响布局。</li></ul><h3 id="伪类和伪元素" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" target="_blank" rel="noreferrer">伪类</a>和伪元素 <a class="header-anchor" href="#伪类和伪元素" aria-label="Permalink to &quot;[伪类](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes)和伪元素&quot;">​</a></h3><p>伪类和伪元素的根本区别在于：它们是否创造了新的元素</p><p>伪类，指可以通过元素选择器，就可以实现的效果，如<code>first-child</code>，<code>active</code>, <code>:checked</code>，<code>:disabled</code>， <code>:nth-child()</code>等。 而伪元素，是指需要通过创元素，才可以实现的效果，如<code>first-letter</code>,<code>before</code>，<code>after</code>等。 具体元素跟写法，可参考：<a href="https://blog.csdn.net/qq_27674439/article/details/90608220" target="_blank" rel="noreferrer">伪元素和伪类的区别总结</a></p><h4 id="行内元素-设置-margin" tabindex="-1">行内元素，设置 margin <a class="header-anchor" href="#行内元素-设置-margin" aria-label="Permalink to &quot;行内元素，设置 margin&quot;">​</a></h4><p>行内元素设置 margin 会有位置的改变吗: 左右 margin 会变，上下 margin 不会变。</p><p>行内元素中，padding-left / padding-right / margin-left / margin-right 有影响结果；</p><p>行内元素中，padding-top / padding-bottom / margin-top / margin-bottom 不影响结果；</p><p>padding-top / padding-bottom 虽然不影响结果，但实际上生效了。</p><p>行内不可替换元素的外边距不会改变该元素的行高。</p><h2 id="img-是什么元素" tabindex="-1"><code>&lt;img&gt;</code>是什么元素 <a class="header-anchor" href="#img-是什么元素" aria-label="Permalink to &quot;`&lt;img&gt;`是什么元素&quot;">​</a></h2><blockquote><p><code>&lt;img /&gt;</code> 标签没有独占一行，所以是行内元素;既然是行内元素为什么能够设置宽高呢？<code>&lt;img /&gt;</code> 标签属于替换元素，具有内置的宽高属性，所以可以设置，具体解释看下面。</p></blockquote><p>从元素本身的特点来讲，可以分为不可替换元素和替换元素,元素相关的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element" target="_blank" rel="noreferrer">MDN 解释</a></p><h5 id="不可替换元素" tabindex="-1">不可替换元素 <a class="header-anchor" href="#不可替换元素" aria-label="Permalink to &quot;不可替换元素&quot;">​</a></h5><ul><li>(X)HTML 的大多数元素是不可替换元素，即其内容直接表现给用户端(例如浏览器),如：<code>&lt;h1&gt;我是标题&lt;/h1&gt;</code>。</li></ul><h5 id="可替换元素" tabindex="-1">可替换元素 <a class="header-anchor" href="#可替换元素" aria-label="Permalink to &quot;可替换元素&quot;">​</a></h5><ul><li>浏览器根据元素的标签和属性，来决定元素的具体显示内容，例如浏览器会根据 <code>&lt;img&gt;</code>标签的 src 属性的值来读取图片信息并显示出来，而如果查看(X)HTML 代码，则看不到图片的实际内容；又例如根据 <code>&lt;input&gt;</code> 标签的 type 属性来决定是显示输入框，还是单选按钮等</li><li>(X)HTML 中的<code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>都是替换元素。这些元素往往没有实际的内容，即是一个空元素 如：<code>&lt;img src=&quot;tigger.jpg&quot;/&gt;</code>、<code>&lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;提交&quot;/&gt;</code></li><li><strong>可替换元素的性质同设置了 display:inline-block 的元素一致</strong></li></ul><p>总结</p><ul><li><p><img>属于可替换元素</p></li><li><p><img>同时具有行内元素，行内块，和块级元素的特性</p></li><li><p>替换元素一般有内在尺寸，所以具有 width 和 height，可以设定，例如你不指定 <img> 的 width 和 height 时，就按其内在尺寸显示，也就是图片被保存的时候的宽度和高度</p></li><li><p>对于表单元素，浏览器也有默认的样式，包括宽度和高度</p></li><li><p><code>&lt;img&gt;、&lt;input&gt;</code>属于行内替换元素。height/width/padding/margin 均可用。效果等于块元素。</p></li></ul><h2 id="em-rem" tabindex="-1">em&amp;&amp;<a href="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/" target="_blank" rel="noreferrer">rem</a> <a class="header-anchor" href="#em-rem" aria-label="Permalink to &quot;em&amp;&amp;[rem](https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/)&quot;">​</a></h2><p>px 像素（Pixel）。相对长度单位。像素 px 是相对于显示器屏幕分辨率而言的。</p><h3 id="em" tabindex="-1">em <a class="header-anchor" href="#em" aria-label="Permalink to &quot;em&quot;">​</a></h3><p><strong>em</strong>，<code>em</code>值的大小是动态的。当定义或继承<code>font-size</code>属性时，<code>1em</code>等于该元素的字体大小。如果你在网页中任何地方都没有设置文字大小的话，那它将等于浏览器默认文字大小，通常是<code>16px</code>。所以通常 1em = 16px。2em = 32px。 如果你设置了 body 元素的字体大小为 20px，那 1em = 20px、2em = 40px。那个 2 就是当前 em 大小的倍数。</p><p><code>em</code>单位受父元素的影响，是因为 font-size 本身是继承属性。如果没有定义，就要基于父元素，直到 html，html 未设置则是浏览器的默认文字大小<code>16px</code></p><p>所有未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em,10px=0.625em。为了简化 font-size 的换算，需要在 css 中的 body 选择器中声明 Font-size=62.5%，这就使 em 值变为 16px*62.5%=10px, 这样 12px=1.2em, 10px=1em, 也就是说只需要将你的原来的 px 数值除以 10，然后换上 em 作为单位就行了。</p><h3 id="rem" tabindex="-1">rem <a class="header-anchor" href="#rem" aria-label="Permalink to &quot;rem&quot;">​</a></h3><p><code>rem</code>即 root em，顾名思义，就是根元素 <code>em</code> 大小。 <code>em</code> 相对于当前元素， <code>rem</code> 相对于根元素，本质差别在于当前元素是多变的，根元素是固定的，也就是说，如果使用 rem，我们的计算值不会受当前元素 <code>font-size</code> 大小的影响。css3 新增。</p><h2 id="line-height-1-5-和-line-height-150-的区别" tabindex="-1">line-height:1.5 和 line-height:150%的区别 <a class="header-anchor" href="#line-height-1-5-和-line-height-150-的区别" aria-label="Permalink to &quot;line-height:1.5 和 line-height:150%的区别&quot;">​</a></h2><p>区别体现在子元素继承时，如下：</p><ul><li>父元素设置<code>line-height:1.5</code>会直接继承给子元素，子元素根据自己的<code>font-size</code>再去计算子元素自己的<code>line-height</code>。</li><li>父元素设置<code>line-height:150%</code>是计算好了<code>line-height</code>值，然后把这个计算值给子元素继承，子元素继承拿到的就是最终的值了。此时子元素设置 font-size 就对其 line-height 无影响了。</li></ul><p>比如父元素设置属性：font- size:14px;line-height:1.5,child 设置 font-size:26px;</p><p>那么父元素：line-height = 14px _ 1.5 = 21px，子元素：line-height = 26px _ 1.5 = 39px。</p><p>父元素设置属性：font-size:14px;line-height:150%,child 设置 font-size:26px;</p><p>那么父元素：line-height = 14px * 150% = 21px，子元素：line-height = 父元素的 line-height = 21px。</p><h2 id="比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" tabindex="-1">比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景 <a class="header-anchor" href="#比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" aria-label="Permalink to &quot;比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景&quot;">​</a></h2><ul><li><p>结构：</p><ul><li><code>display:none</code> : 会让元素完全从渲染树中消失，渲染的时候不占据任何空间, 不能点击</li><li><code>visibility: hidden</code> :不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，不能点击</li><li><code>opacity: 0</code> : 不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，<strong>可以点击</strong></li></ul></li><li><p>继承：</p><ul><li>display: none 和 opacity: 0 ：是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示。</li><li>visibility: hidden ：是继承属性，子孙节点消失由于继承了 hidden ，通过设置 visibility: visible; 可以让子孙节点显式。</li></ul></li><li><p>性能：</p><ul><li><code>display: none</code> : 修改元素会造成文档<strong>回流</strong>,读屏器不会读取 display: none 元素内容，性能消耗较大</li><li><code>visibility: hidden</code> : 修改元素只会造成本元素的<strong>重绘</strong>，性能消耗较少</li><li>元素内容 opacity: 0 ：提升为合成层，不会触发重绘，性能较高；</li></ul></li><li><p>联系：它们都能让元素不可见</p></li></ul><h2 id="clientheight、offsetheight、scrollheight、offsetto、scrolltop-element-getboundingclientrect" tabindex="-1">clientHeight、offsetHeight、scrollHeight、offsetTo、scrollTop,<code>Element.getBoundingClientRect()</code> <a class="header-anchor" href="#clientheight、offsetheight、scrollheight、offsetto、scrolltop-element-getboundingclientrect" aria-label="Permalink to &quot;clientHeight、offsetHeight、scrollHeight、offsetTo、scrollTop,`Element.getBoundingClientRect()`&quot;">​</a></h2><p>每个 HTML 元素都具有 clientHeight offsetHeight scrollHeight offsetTop scrollTop 这 5 个和元素高度、滚动、位置相关的属性，总结出规律如下：</p><p>clientHeight 和 offsetHeight 属性和元素的滚动、位置没有关系它代表元素的高度，其中：</p><h3 id="clientheight" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight" target="_blank" rel="noreferrer">clientHeight</a> <a class="header-anchor" href="#clientheight" aria-label="Permalink to &quot;[clientHeight](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight)&quot;">​</a></h3><p>包括<code>padding</code>但不包括 border、水平滚动条、margin 的元素的高度。对于<code>display:inline</code>的元素这个属性一直是 0，单位 px，只读元素。box-sizing 属性设置不会影响。</p><p><code>clientHeight</code> 可以通过 CSS <code>height</code> + CSS <code>padding</code> - 水平滚动条高度 (如果存在)来计算.</p><p><code>element.style.height</code>获取的是内联属性（即： 标签内设置的 style）,也就是说如果是在 css 中设置的，获取不到。通常只用来设置样式。</p><p><code>window.getComputedStyle(ele, [伪类])</code>（返回的是元素所有的样式属性）能获取 css height</p><p>上面 2 个返回的都是如<code>200px</code>的字符串 css 值</p><h3 id="element-getboundingclientrect" tabindex="-1"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noreferrer">Element.getBoundingClientRect()</a> <a class="header-anchor" href="#element-getboundingclientrect" aria-label="Permalink to &quot;[Element.getBoundingClientRect()](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)&quot;">​</a></h3><p>方法返回元素的大小及其相对于视口的位置。</p><p>返回值是一个 <code>DOMRect</code> 对象，这个对象是由该元素的 <code>getClientRects()</code> 方法返回的一组矩形的集合，就是该元素的 CSS 边框大小。返回的结果是包含完整元素的最小矩形，并且拥有 left, top, right, bottom, x, y, width, 和 height 这几个以像素为单位的只读属性用于描述整个边框。除了 width 和 height 以外的属性是相对于视图窗口的左上角来计算的。-mdn</p><p>用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。</p><p>top、left 和 css 中的理解很相似，right 是指元素右边界距窗口最左边的距离，bottom 是指元素下边界距窗口最上面的距离。width、height 是元素自身的宽高。</p><p><img src="'+o+`" alt=""></p><p>获取到的结果都是 Number，不带单位</p><ul><li>clientWidth 获取元素可视部分的宽度，即 CSS 的 width 和 padding 属性值之和，元素边框和滚动条不包括在内，也不包含任何可能的滚动区域</li><li>clientHeight 获取元素可视部分的高度，即 CSS 的 height 和 padding 属性值之和，元素边框和滚动条不包括在内，也不包含任何可能的滚动区域</li><li>offsetWidth 元素在页面中占据的宽度总和，包括 width、padding、border 以及滚动条的宽度</li><li>offsetHeight 元素在页面中占据的高度总和，包括 height、padding、border 以及滚动条的宽度</li><li>scrollWidth 当元素设置了 overflow:scroll 样式属性时，元素的总宽度，也称滚动宽度。在默认状态下，如果该属性值大于 clientWidth 属性值，则元素会显示滚动条，以便能够翻阅被隐藏的区域</li><li>scrollHeight 当元素设置了 overflow:scroll 样式属性时，元素的总高度，也称滚动高度。在默认状态下，如果该属性值大于 clientWidth 属性值，则元素会显示滚动条，以便能够翻阅被隐藏的区域</li><li>scrollTop: 代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时 scrollTop==0 恒成立。单位 px，可读可设置。</li><li>offsetTop: 当前元素顶部距离最近父元素顶部的距离，和有没有滚动条没有关系。单位 px，只读元素。</li></ul><p><a href="https://juejin.cn/post/6844904133921619982" target="_blank" rel="noreferrer">文章</a></p><h2 id="css-实现文本的单行和多行溢出省略效果" tabindex="-1">CSS 实现文本的单行和多行溢出省略效果 <a class="header-anchor" href="#css-实现文本的单行和多行溢出省略效果" aria-label="Permalink to &quot;CSS 实现文本的单行和多行溢出省略效果&quot;">​</a></h2><h3 id="单行文本" tabindex="-1">单行文本 <a class="header-anchor" href="#单行文本" aria-label="Permalink to &quot;单行文本&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>overflow: hidden（文字长度超出限定宽度，则隐藏超出的内容）</li><li>white-space: nowrap（设置文字在一行显示，不能换行）</li><li>text-overflow: ellipsis（规定当文本溢出时，显示省略符号来代表被修剪的文本）</li></ul><h3 id="多行文本" tabindex="-1">多行文本 <a class="header-anchor" href="#多行文本" aria-label="Permalink to &quot;多行文本&quot;">​</a></h3><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-line-clamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-box-orient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vertical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.mulLineTruncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  max-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>-webkit-line-clamp: 2（用来限制在一个块元素显示的文本的行数, 2 表示最多显示 2 行。 为了实现该效果，它需要组合其他的 WebKit 属性）</li><li>display: -webkit-box（和 1 结合使用，将对象作为弹性伸缩盒子模型显示 ）</li><li>overflow: hidden（文本溢出限定的宽度就隐藏内容）</li><li>-webkit-box-orient: vertical（和 1 结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 ）</li><li>text-overflow: ellipsis（多行文本的情况下，用省略号“…”隐藏溢出范围的文本)</li></ul><h2 id="移动端如何处理点击穿透" tabindex="-1">移动端如何处理点击穿透 <a class="header-anchor" href="#移动端如何处理点击穿透" aria-label="Permalink to &quot;移动端如何处理点击穿透&quot;">​</a></h2><p>点击穿透的原因：</p><p>在 pc 端的事件触发顺序：mousedown -&gt; click -&gt; mouseup</p><p>在移动端的事件触发顺序：touchstart -&gt; touchmove -&gt; touchend</p><p>移动端的事件优先级高，并且会模拟 mouse 事件，所以综合来看，移动端的执行顺序：</p><p>touchstart -&gt; touchmove -&gt; touchend -&gt; mousedown -&gt; click -&gt; mouseup</p><p>由于很多时候，我们点击关闭弹窗时，弹窗立马就关闭了，但在移动端还存在一个点击延迟效果，即执行 tap 事件之后 300ms 之后才会触发 click 事件，这个时候弹窗已经没有了，于是 click 事件就作用在了弹窗下的元素上，就形成了点击穿透现象。</p><p>解决方案：</p><p>1、使用 fastclick 禁止 300ms 点击延迟。</p><p>2、使用 pointer-events 控制是否可点击。</p><ul><li>不允许点击，即让点击穿透 ：pointer-events: none;</li><li>允许点击，即禁止穿透（默认值）：pointer-events: auto;</li></ul><h2 id="transition" tabindex="-1"><a href="https://www.cnblogs.com/coco1s/p/14355351.html" target="_blank" rel="noreferrer">transition</a> <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;[transition](https://www.cnblogs.com/coco1s/p/14355351.html)&quot;">​</a></h2><p>transition 和 animation 支持的属性， <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noreferrer">CSS animated properties</a></p><p>某些支持 transition 的属性在某些特定状态下，也是不支持 transition 的。非常典型的就是 height: auto 和 width: auto。CSS transition 不支持元素的高度或者宽度为 auto 的变化。</p><p>利用 <code>max-height</code> 的特性来做到动态高度的伸缩。</p><h2 id="如何写出高性能的-css3-动画" tabindex="-1"><a href="https://www.cnblogs.com/ypppt/p/12937506.html" target="_blank" rel="noreferrer">如何写出高性能的 CSS3 动画</a> <a class="header-anchor" href="#如何写出高性能的-css3-动画" aria-label="Permalink to &quot;[如何写出高性能的 CSS3 动画](https://www.cnblogs.com/ypppt/p/12937506.html)&quot;">​</a></h2><h2 id="shadow-dom" tabindex="-1"><a href="https://www.cnblogs.com/coco1s/p/5711795.html" target="_blank" rel="noreferrer">shadow-dom</a> <a class="header-anchor" href="#shadow-dom" aria-label="Permalink to &quot;[shadow-dom](https://www.cnblogs.com/coco1s/p/5711795.html)&quot;">​</a></h2><p><code>Shadow DOM</code> 接口可以将一个隐藏的、独立的 DOM 附加到一个元素上</p><ul><li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li><li>Shadow tree：Shadow DOM 内部的 DOM 树。</li><li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li><li>Shadow root: Shadow tree 的根节点。</li></ul><details class="details custom-block"><summary>demo</summary><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doctype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Simple DOM example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shadow-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://twitter.com/ireaderinokun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; Follow @ireaderinokun &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shadowEl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.shadow-host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Shadow host</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shadowEl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Shadow root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      link.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shadowEl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).href</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      link.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`&lt;span aria-label=&quot;Twitter icon&quot;&gt;&lt;/span&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shadowEl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">textContent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      shadow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> styles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styles.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		a, span {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		vertical-align: top;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		display: inline-block;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		box-sizing: border-box;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	a {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		height: 20px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		padding: 1px 8px 1px 6px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		background-color: #1b95e0;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		color: #fff;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		border-radius: 3px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		font-weight: 500;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		font-size: 11px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		font-family:&#39;Helvetica Neue&#39;, Arial, sans-serif;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		line-height: 18px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		text-decoration: none;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	a:hover {  background-color: #0c7abf; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	span {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		position: relative;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		top: 2px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		width: 14px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		height: 14px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		margin-right: 3px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		background: transparent 0 0 no-repeat;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2072%2072%22%3E%3Cpath%20fill%3D%22none%22%20d%3D%22M0%200h72v72H0z%22%2F%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23fff%22%20d%3D%22M68.812%2015.14c-2.348%201.04-4.87%201.744-7.52%202.06%202.704-1.62%204.78-4.186%205.757-7.243-2.53%201.5-5.33%202.592-8.314%203.176C56.35%2010.59%2052.948%209%2049.182%209c-7.23%200-13.092%205.86-13.092%2013.093%200%201.026.118%202.02.338%202.98C25.543%2024.527%2015.9%2019.318%209.44%2011.396c-1.125%201.936-1.77%204.184-1.77%206.58%200%204.543%202.312%208.552%205.824%2010.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163%200%206.345%204.513%2011.638%2010.504%2012.84-1.1.298-2.256.457-3.45.457-.845%200-1.666-.078-2.464-.23%201.667%205.2%206.5%208.985%2012.23%209.09-4.482%203.51-10.13%205.605-16.26%205.605-1.055%200-2.096-.06-3.122-.184%205.794%203.717%2012.676%205.882%2020.067%205.882%2024.083%200%2037.25-19.95%2037.25-37.25%200-.565-.013-1.133-.038-1.693%202.558-1.847%204.778-4.15%206.532-6.774z%22%2F%3E%3C%2Fsvg%3E);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	}\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      shadow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(styles)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></details><h4 id="transform-失效的问题" tabindex="-1">transform 失效的问题 <a class="header-anchor" href="#transform-失效的问题" aria-label="Permalink to &quot;transform 失效的问题&quot;">​</a></h4><p>可被 transform 的元素有：block-level element 或 atomic inline-level element 等，但不包括 inline element。比如<strong>没有</strong>被设置成<code>display: inline-block</code>的<code>span</code>标签就会失效</p><h2 id="自适应布局和响应式布局" tabindex="-1">自适应布局和响应式布局 <a class="header-anchor" href="#自适应布局和响应式布局" aria-label="Permalink to &quot;自适应布局和响应式布局&quot;">​</a></h2><h3 id="垂直居中和常见布局" tabindex="-1">垂直居中和常见布局 <a class="header-anchor" href="#垂直居中和常见布局" aria-label="Permalink to &quot;垂直居中和常见布局&quot;">​</a></h3><h4 id="各种页面常见布局知名网站实例分析相关阅读推荐" tabindex="-1"><a href="https://sweet-kk.github.io/css-layout/" target="_blank" rel="noreferrer">各种页面常见布局知名网站实例分析相关阅读推荐</a> <a class="header-anchor" href="#各种页面常见布局知名网站实例分析相关阅读推荐" aria-label="Permalink to &quot;[各种页面常见布局知名网站实例分析相关阅读推荐](https://sweet-kk.github.io/css-layout/)&quot;">​</a></h4><h4 id="网页布局总结" tabindex="-1"><a href="https://www.zhihu.com/question/21775016/answer/1358336033" target="_blank" rel="noreferrer">网页布局总结</a> <a class="header-anchor" href="#网页布局总结" aria-label="Permalink to &quot;[网页布局总结](https://www.zhihu.com/question/21775016/answer/1358336033)&quot;">​</a></h4><p>响应式布局实现一个网站能够兼容多个终端，网页的布局针对屏幕大小的尺寸而进行响应，流式布局+弹性布局，再搭配媒体查询技术使用。</p><p>自适应布局大致是指网页能够在不同大小的终端设备上自行适应显示。就是让一个网站在不同大小的设备上呈现显示同一样的页面，让同一个页面适应不同大小屏幕，根据屏幕的大小，自动缩放。多用 rem+js 实现，在移动端适配多种屏幕。</p><p><img src="`+r+'" alt=""></p><ul><li><a href="https://juejin.cn/post/6941206439624966152#heading-47" target="_blank" rel="noreferrer">来源</a><img src="'+k+'" alt=""></li></ul><p><img src="'+d+`" alt=""></p><h2 id="css-样式管理方案" tabindex="-1"><a href="https://juejin.cn/post/6844903971857907720" target="_blank" rel="noreferrer">css 样式管理方案</a> <a class="header-anchor" href="#css-样式管理方案" aria-label="Permalink to &quot;[css 样式管理方案](https://juejin.cn/post/6844903971857907720)&quot;">​</a></h2><ol><li>命名空间 + BEM 规范<a href="https://www.bemcss.com/" target="_blank" rel="noreferrer">BEM</a>（block-name__element-name--modifier-name<code>即模块名 + 元素名 + 修饰器名</code>。）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.componentA {</span></span>
<span class="line"><span>    &amp;__title {</span></span>
<span class="line"><span>        font-size: 14px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;div class=&quot;componentA&quot;&gt;</span></span>
<span class="line"><span>    &lt;h1 class=&quot;componentA__title&quot;&gt;组件A的title&lt;/h1&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><p>该方案适用于组件库的编写。</p><ol start="2"><li>CSS in JS： <code>styled-components</code></li><li>CSS Modules</li></ol><p>原理：利用 webpack 等构建工具自动将类名转换成局部。 详细配置:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    loader: &#39;css-loader&#39;,</span></span>
<span class="line"><span>    options: {</span></span>
<span class="line"><span>          importLoaders: 2,</span></span>
<span class="line"><span>          modules: isModules,</span></span>
<span class="line"><span>          localIdentName: &#39;[name]__[local]__[hash:base64:5]&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">App.css</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">.title {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   color: red;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">**/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{style.title}&gt;Hello World&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="overflow-x-auto-overflow-y-visible-混用不生效的问题" tabindex="-1"><code>overflow-x:auto;overflow-y:visible;</code> 混用不生效的问题 <a class="header-anchor" href="#overflow-x-auto-overflow-y-visible-混用不生效的问题" aria-label="Permalink to &quot;\`overflow-x:auto;overflow-y:visible;\` 混用不生效的问题&quot;">​</a></h2><p>W3C规定，如果 <code>overflow-x</code> 和 <code>overflow-y </code>中的一个被赋为 <code>visible</code> ，而另一个被赋值为 <code>scroll</code> 或 <code>auto</code> ，那么 <code>visible</code> 会被重置为 <code>auto</code> 。</p><h2 id="css世界》阅读笔记" tabindex="-1"><a href="https://chrisdeo.github.io/2019/01/15/%E3%80%8ACSS%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" target="_blank" rel="noreferrer">CSS世界》阅读笔记</a> <a class="header-anchor" href="#css世界》阅读笔记" aria-label="Permalink to &quot;[CSS世界》阅读笔记](https://chrisdeo.github.io/2019/01/15/%E3%80%8ACSS%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/)&quot;">​</a></h2><h2 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">​</a></h2><ul><li><a href="https://uiverse.io/" target="_blank" rel="noreferrer">uiverse.io</a> copy css, Community-built library of UI elements. Copy as HTML/CSS, Tailwind, React and Figma.</li></ul>`,151)]))}const f=s(c,[["render",g]]);export{C as __pageData,f as default};
