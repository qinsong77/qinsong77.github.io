import{_ as o,r as e,o as c,c as l,a as n,b as t,F as u,d as a,e as s}from"./app.a96f585b.js";const r={},i=a(`<ul><li><a href="#%E5%85%A8%E6%8E%92%E5%88%97">\u5168\u6392\u5217</a></li><li><a href="#%E5%AD%90%E9%9B%86">\u5B50\u96C6</a></li><li><a href="#n%E7%9A%87%E5%90%8E">N\u7687\u540E</a></li><li><a href="#%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C">\u7EC4\u5408\u603B\u548C</a></li><li><a href="#%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2">\u5355\u8BCD\u641C\u7D22</a></li></ul><p>\u89E3\u51B3\u4E00\u4E2A\u56DE\u6EAF\u95EE\u9898\uFF0C\u5B9E\u9645\u4E0A\u5C31\u662F<strong>\u4E00\u4E2A\u51B3\u7B56\u6811\u7684\u904D\u5386\u8FC7\u7A0B</strong>\u3002\u53EA\u9700\u8981\u601D\u8003 3 \u4E2A\u95EE\u9898\uFF1A</p><ol><li><p><strong>\u8DEF\u5F84</strong>\uFF1A\u4E5F\u5C31\u662F\u5DF2\u7ECF\u505A\u51FA\u7684\u9009\u62E9\u3002</p></li><li><p><strong>\u9009\u62E9\u5217\u8868</strong>\uFF1A\u4E5F\u5C31\u662F\u4F60\u5F53\u524D\u53EF\u4EE5\u505A\u7684\u9009\u62E9\u3002</p></li><li><p><strong>\u7ED3\u675F\u6761\u4EF6</strong>\uFF1A\u4E5F\u5C31\u662F\u5230\u8FBE\u51B3\u7B56\u6811\u5E95\u5C42\uFF0C\u65E0\u6CD5\u518D\u505A\u9009\u62E9\u7684\u6761\u4EF6\u3002</p></li></ol><p>\u56DE\u6EAF\u7B97\u6CD5\u7684\u6846\u67B6\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token parameter">\u8DEF\u5F84<span class="token punctuation">,</span> \u9009\u62E9\u5217\u8868</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token literal-property property">\u6EE1\u8DB3\u7ED3\u675F\u6761\u4EF6</span><span class="token operator">:</span>
          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\u8DEF\u5F84<span class="token punctuation">)</span>
          <span class="token keyword">return</span>
  
  <span class="token keyword">for</span> \u9009\u62E9 <span class="token keyword">in</span> <span class="token literal-property property">\u9009\u62E9\u5217\u8868</span><span class="token operator">:</span>
      \u505A\u9009\u62E9
      <span class="token function">backtrack</span><span class="token punctuation">(</span>\u8DEF\u5F84<span class="token punctuation">,</span> \u9009\u62E9\u5217\u8868<span class="token punctuation">)</span>
      \u64A4\u9500\u9009\u62E9
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>\u5176\u6838\u5FC3\u5C31\u662F for \u5FAA\u73AF\u91CC\u9762\u7684\u9012\u5F52\uFF0C\u5728\u9012\u5F52\u8C03\u7528\u4E4B\u524D\u300C\u505A\u9009\u62E9\u300D\uFF0C\u5728\u9012\u5F52\u8C03\u7528\u4E4B\u540E\u300C\u64A4\u9500\u9009\u62E9\u300D</strong></p>`,6),k={id:"\u5168\u6392\u5217",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#\u5168\u6392\u5217","aria-hidden":"true"},"#",-1),m=s(),d={href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},f=s("\u5168\u6392\u5217"),w=a(`<p>\u65F6\u95F4\u590D\u6742\u5EA6 O(N!)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>

<span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">track</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>track<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
            track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span>
            track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,2),h={id:"\u5B50\u96C6",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#\u5B50\u96C6","aria-hidden":"true"},"#",-1),g=s(),_={href:"https://leetcode-cn.com/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},v=s("\u5B50\u96C6"),j=a(`<p>\u9047\u5230\u4E00\u4E2A\u6570\u5C31\u628A\u6240\u6709\u5B50\u96C6\u52A0\u4E0A\u8BE5\u6570\u7EC4\u6210\u65B0\u7684\u5B50\u96C6\uFF0C\u904D\u5386\u5B8C\u6BD5\u5373\u662F\u6240\u6709\u5B50\u96C6</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>
            item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>temp<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6307\u9488\u8D8A\u754C</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u52A0\u5165\u89E3\u96C6</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>                   <span class="token comment">// \u7ED3\u675F\u5F53\u524D\u7684\u9012\u5F52</span>
    <span class="token punctuation">}</span>
    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9009\u62E9\u8FD9\u4E2A\u6570</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u57FA\u4E8E\u8BE5\u9009\u62E9\uFF0C\u7EE7\u7EED\u5F80\u4E0B\u9012\u5F52\uFF0C\u8003\u5BDF\u4E0B\u4E00\u4E2A\u6570</span>
    list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// \u4E0A\u9762\u7684\u9012\u5F52\u7ED3\u675F\uFF0C\u64A4\u9500\u8BE5\u9009\u62E9</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u4E0D\u9009\u8FD9\u4E2A\u6570\uFF0C\u7EE7\u7EED\u5F80\u4E0B\u9012\u5F52\uFF0C\u8003\u5BDF\u4E0B\u4E00\u4E2A\u6570</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,3),x={id:"n\u7687\u540E",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#n\u7687\u540E","aria-hidden":"true"},"#",-1),B=s(),F={href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"},A=s("N\u7687\u540E"),N=a(`<p>\u56DE\u6EAF\u7684\u5957\u8DEF\uFF1A</p><p>\u904D\u5386\u679A\u4E3E\u51FA\u6240\u6709\u53EF\u80FD\u7684\u9009\u62E9\u3002</p><p>\u4F9D\u6B21\u5C1D\u8BD5\u8FD9\u4E9B\u9009\u62E9\uFF1A\u4F5C\u51FA\u4E00\u79CD\u9009\u62E9\uFF0C\u5E76\u5F80\u4E0B\u9012\u5F52\u3002</p><p>\u5982\u679C\u8FD9\u4E2A\u9009\u62E9\u4EA7\u751F\u4E0D\u51FA\u6B63\u786E\u7684\u89E3\uFF0C\u8981\u64A4\u9500\u8FD9\u4E2A\u9009\u62E9\uFF08\u5C06\u5F53\u524D\u7684 &quot;Q&quot; \u6062\u590D\u4E3A &quot;.&quot;\uFF09\uFF0C\u56DE\u5230\u4E4B\u524D\u7684\u72B6\u6001\uFF0C\u5E76\u4F5C\u51FA\u4E0B\u4E00\u4E2A\u53EF\u7528\u7684\u9009\u62E9\u3002</p><p>\u662F\u4E00\u4E2A\u9009\u62E9\u3001\u63A2\u7D22\u3001\u64A4\u9500\u9009\u62E9\u7684\u8FC7\u7A0B\u3002\u8BC6\u522B\u51FA\u6B7B\u80E1\u540C\uFF0C\u5C31\u56DE\u6EAF\uFF0C\u5C1D\u8BD5\u4E0B\u4E00\u4E2A\u70B9\uFF0C\u4E0D\u505A\u65E0\u6548\u7684\u641C\u7D22\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// https://leetcode-cn.com/problems/n-queens/solution/shou-hua-tu-jie-cong-jing-dian-de-nhuang-hou-wen-t/</span>
<span class="token keyword">const</span> <span class="token function-variable function">solveNQueens</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5217\u96C6\uFF0C\u8BB0\u5F55\u51FA\u73B0\u8FC7\u7687\u540E\u7684\u5217</span>
  <span class="token keyword">const</span> diag1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6B63\u5BF9\u89D2\u7EBF\u96C6</span>
  <span class="token keyword">const</span> diag2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u53CD\u5BF9\u89D2\u7EBF\u96C6</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> stringsBoard <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringsBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stringsBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stringsBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5982\u679C\u5F53\u524D\u70B9\u7684\u6240\u5728\u7684\u5217\uFF0C\u6240\u5728\u7684\u5BF9\u89D2\u7EBF\u90FD\u6CA1\u6709\u7687\u540E\uFF0C\u5373\u53EF\u9009\u62E9\uFF0C\u5426\u5219\uFF0C\u8DF3\u8FC7</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cols<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>diag1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>row <span class="token operator">+</span> col<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>diag2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>row <span class="token operator">-</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// \u653E\u7F6E\u7687\u540E</span>
        cols<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// \u8BB0\u5F55\u653E\u4E86\u7687\u540E\u7684\u5217</span>
        diag1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row <span class="token operator">+</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u8BB0\u5F55\u653E\u4E86\u7687\u540E\u7684\u6B63\u5BF9\u89D2\u7EBF</span>
        diag2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row <span class="token operator">-</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u8BB0\u5F55\u653E\u4E86\u7687\u540E\u7684\u8D1F\u5BF9\u89D2\u7EBF</span>
        <span class="token function">helper</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// \u64A4\u9500\u8BE5\u70B9\u7684\u7687\u540E</span>
        cols<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// \u5BF9\u5E94\u7684\u8BB0\u5F55\u4E5F\u5220\u4E00\u4E0B</span>
        diag1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>row <span class="token operator">+</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        diag2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>row <span class="token operator">-</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">helper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>`,6),q={id:"\u7EC4\u5408\u603B\u548C",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#\u7EC4\u5408\u603B\u548C","aria-hidden":"true"},"#",-1),T=s(),V={href:"https://leetcode-cn.com/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},C=s("\u7EC4\u5408\u603B\u548C"),D=a(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// start\u662F\u5F53\u524D\u9009\u62E9\u7684\u8D77\u70B9\u7D22\u5F15 temp\u662F\u5F53\u524D\u7684\u96C6\u5408 sum\u662F\u5F53\u524D\u6C42\u548C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// temp\u7684\u62F7\u8D1D \u52A0\u5165\u89E3\u96C6</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token comment">// \u7ED3\u675F\u5F53\u524D\u9012\u5F52</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u679A\u4E3E\u5F53\u524D\u53EF\u9009\u7684\u6570\uFF0C\u4ECEstart\u5F00\u59CB</span>
      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// \u9009\u8FD9\u4E2A\u6570</span>
      <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u57FA\u4E8E\u6B64\u7EE7\u7EED\u9009\u62E9\uFF0C\u4F20i\uFF0C\u4E0B\u4E00\u6B21\u5C31\u4E0D\u4F1A\u9009\u5230i\u5DE6\u8FB9\u7684\u6570</span>
      temp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u64A4\u9500\u9009\u62E9\uFF0C\u56DE\u5230\u9009\u62E9candidates[i]\u4E4B\u524D\u7684\u72B6\u6001\uFF0C\u7EE7\u7EED\u5C1D\u8BD5\u9009\u540C\u5C42\u53F3\u8FB9\u7684\u6570</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6700\u5F00\u59CB\u53EF\u9009\u7684\u6570\u662F\u4ECE\u7B2C0\u9879\u5F00\u59CB\u7684\uFF0C\u4F20\u5165\u4E00\u4E2A\u7A7A\u96C6\u5408\uFF0Csum\u4E5F\u4E3A0</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,1),Q={id:"\u5355\u8BCD\u641C\u7D22",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#\u5355\u8BCD\u641C\u7D22","aria-hidden":"true"},"#",-1),I=s(),L={href:"https://leetcode-cn.com/problems/word-search/",target:"_blank",rel:"noopener noreferrer"},O=s("\u5355\u8BCD\u641C\u7D22"),z=a(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u94FE\u63A5\uFF1Ahttps://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/</span>
<span class="token keyword">const</span> <span class="token function-variable function">exist</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">board<span class="token punctuation">,</span> word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// \u4E8C\u7EF4\u77E9\u9635used\uFF0C\u5B58\u653Ebool\u503C</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// canFind \u5224\u65AD\u5F53\u524D\u70B9\u662F\u5426\u662F\u76EE\u6807\u8DEF\u5F84\u4E0A\u7684\u70B9</span>
    <span class="token keyword">const</span> <span class="token function-variable function">canFind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// row col \u5F53\u524D\u70B9\u7684\u5750\u6807\uFF0Ci\u5F53\u524D\u8003\u5BDF\u7684word\u5B57\u7B26\u7D22\u5F15</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> word<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// \u9012\u5F52\u7684\u51FA\u53E3 i\u8D8A\u754C\u4E86\u5C31\u8FD4\u56DEtrue</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">&gt;=</span> m <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5F53\u524D\u70B9\u8D8A\u754C \u8FD4\u56DEfalse</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5F53\u524D\u70B9\u5DF2\u7ECF\u8BBF\u95EE\u8FC7\uFF0C\u6216\uFF0C\u975E\u76EE\u6807\u70B9</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u6392\u9664\u6389\u6240\u6709false\u7684\u60C5\u51B5\uFF0C\u5F53\u524D\u70B9\u6682\u65F6\u6CA1\u6BDB\u75C5\uFF0C\u53EF\u4EE5\u7EE7\u7EED\u9012\u5F52\u8003\u5BDF</span>
        used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// \u8BB0\u5F55\u4E00\u4E0B\u5F53\u524D\u70B9\u88AB\u8BBF\u95EE\u4E86</span>
        <span class="token comment">// canFindRest\uFF1A\u57FA\u4E8E\u5F53\u524D\u9009\u62E9\u7684\u70B9[row,col]\uFF0C\u80FD\u5426\u627E\u5230\u5269\u4F59\u5B57\u7B26\u7684\u8DEF\u5F84\u3002</span>
        <span class="token keyword">const</span> canFindRest <span class="token operator">=</span> <span class="token function">canFind</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">canFind</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token function">canFind</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">canFind</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token keyword">if</span> <span class="token punctuation">(</span>canFindRest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u57FA\u4E8E\u5F53\u524D\u70B9[row,col]\uFF0C\u53EF\u4EE5\u4E3A\u5269\u4E0B\u7684\u5B57\u7B26\u627E\u5230\u8DEF\u5F84</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
        used<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u80FD\u4E3A\u5269\u4E0B\u5B57\u7B26\u627E\u5230\u8DEF\u5F84\uFF0C\u8FD4\u56DEfalse\uFF0C\u64A4\u9500\u5F53\u524D\u70B9\u7684\u8BBF\u95EE\u72B6\u6001</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u904D\u5386\u627E\u8D77\u70B9\uFF0C\u4F5C\u4E3A\u9012\u5F52\u5165\u53E3</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canFind</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u627E\u5230\u8D77\u70B9\u4E14\u9012\u5F52\u7ED3\u679C\u4E3A\u771F\uFF0C\u627E\u5230\u76EE\u6807\u8DEF\u5F84</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u600E\u4E48\u6837\u90FD\u6CA1\u6709\u8FD4\u56DEtrue\uFF0C\u5219\u8FD4\u56DEfalse</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>`,1);function G(H,J){const p=e("ExternalLinkIcon");return c(),l(u,null,[i,n("h3",k,[b,m,n("a",d,[f,t(p)])]),w,n("h3",h,[y,g,n("a",_,[v,t(p)])]),j,n("h3",x,[E,B,n("a",F,[A,t(p)])]),N,n("h4",q,[S,T,n("a",V,[C,t(p)])]),D,n("h3",Q,[R,I,n("a",L,[O,t(p)])]),z],64)}var M=o(r,[["render",G],["__file","backTrack.html.vue"]]);export{M as default};
