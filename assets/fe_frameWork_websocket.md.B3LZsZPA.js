import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.BgId8OS5.js";const p="/assets/websocket1.B_n6PITN.png",t="/assets/data_struct_explin.CsC8i8s9.png",E=JSON.parse('{"title":"websocket","description":"","frontmatter":{"title":"websocket"},"headers":[],"relativePath":"fe/frameWork/websocket.md","filePath":"fe/frameWork/websocket.md","lastUpdated":1646930185000}'),l={name:"fe/frameWork/websocket.md"};function h(k,s,o,c,r,d){return n(),i("div",null,s[0]||(s[0]=[e('<ul><li><a href="https://juejin.cn/post/6854573221241421838" target="_blank" rel="noreferrer">你不知道的WebSocket</a></li><li><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noreferrer">WebSocket协议：5分钟从入门到精通</a></li></ul><p><img src="'+p+`" alt=""></p><p>WebSocket最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）数据格式比较轻量，性能开销小，通信高效。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</p><p>（4）可以发送文本，也可以发送<strong>二进制数据</strong>。</p><p>（5）没有同源限制，客户端可以与任意服务器通信。</p><p>（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</p><h3 id="如何建立连接" tabindex="-1">如何建立连接 <a class="header-anchor" href="#如何建立连接" aria-label="Permalink to &quot;如何建立连接&quot;">​</a></h3><h4 id="_1、客户端-申请协议升级" tabindex="-1">1、客户端：申请协议升级 <a class="header-anchor" href="#_1、客户端-申请协议升级" aria-label="Permalink to &quot;1、客户端：申请协议升级&quot;">​</a></h4><p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持<code>GET</code>方法。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET / HTTP/1.1</span></span>
<span class="line"><span>Host: localhost:8080</span></span>
<span class="line"><span>Origin: http://127.0.0.1:3000</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Version: 13</span></span>
<span class="line"><span>Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</span></span></code></pre></div><p>重点请求首部意义如下：</p><ul><li><code>Connection: Upgrade</code>：表示要升级协议</li><li><code>Upgrade: websocket</code>：表示要升级到<code>websocket</code>协议。</li><li><code>Sec-WebSocket-Version: 13</code>：表示websocket的版本。如果服务端不支持该版本，需要返回一个<code>Sec-WebSocket-Version</code>header，里面包含服务端支持的版本号。</li><li><code>Sec-WebSocket-Key</code>：与后面服务端响应首部的<code>Sec-WebSocket-Accept</code>是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。 上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</li></ul><h4 id="_2、服务端-响应协议升级" tabindex="-1">2、服务端：响应协议升级 <a class="header-anchor" href="#_2、服务端-响应协议升级" aria-label="Permalink to &quot;2、服务端：响应协议升级&quot;">​</a></h4><p>服务端返回内容如下，状态代码<code>101</code>表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span>Connection:Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span></code></pre></div><p><code>Sec-WebSocket-Accept</code>根据客户端请求首部的<code>Sec-WebSocket-Key</code>计算出来。计算公式为：</p><ol><li>将<code>Sec-WebSocket-Key</code>跟<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>拼接。</li><li>通过<code>SHA1</code>计算出摘要，并转成<code>base64</code>字符串。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// util.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;crypto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MAGIC_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAcceptValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secWsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secWsKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MAGIC_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="数据帧格式" tabindex="-1">数据帧格式 <a class="header-anchor" href="#数据帧格式" aria-label="Permalink to &quot;数据帧格式&quot;">​</a></h3><p>WebSocket客户端、服务端通信的最小单位是帧（frame），由1个或多个帧组成一条完整的消息（message）。</p><ol><li>发送端：将消息切割成多个帧，并发送给服务端；</li><li>接收端：接收消息帧，并将关联的帧重新组装成完整的消息；</li></ol><p><a href="https://tools.ietf.org/html/rfc6455#section-5.2" target="_blank" rel="noreferrer">数据帧的格式-rfc6455</a></p><ol><li>从左到右，单位是比特。比如<code>FIN</code>、<code>RSV1</code>各占据1比特，<code>opcode</code>占据4比特。</li><li>内容包括了标识、操作代码、掩码、数据、数据长度等。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>      0                   1                   2                   3</span></span>
<span class="line"><span>      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span></span>
<span class="line"><span>     +-+-+-+-+-------+-+-------------+-------------------------------+</span></span>
<span class="line"><span>     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span></span>
<span class="line"><span>     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</span></span>
<span class="line"><span>     |N|V|V|V|       |S|             |   (if payload len==126/127)   |</span></span>
<span class="line"><span>     | |1|2|3|       |K|             |                               |</span></span>
<span class="line"><span>     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span></span>
<span class="line"><span>     |     Extended payload length continued, if payload len == 127  |</span></span>
<span class="line"><span>     + - - - - - - - - - - - - - - - +-------------------------------+</span></span>
<span class="line"><span>     |                               |Masking-key, if MASK set to 1  |</span></span>
<span class="line"><span>     +-------------------------------+-------------------------------+</span></span>
<span class="line"><span>     | Masking-key (continued)       |          Payload Data         |</span></span>
<span class="line"><span>     +-------------------------------- - - - - - - - - - - - - - - - +</span></span>
<span class="line"><span>     :                     Payload Data continued ...                :</span></span>
<span class="line"><span>     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span></span>
<span class="line"><span>     |                     Payload Data continued ...                |</span></span>
<span class="line"><span>     +---------------------------------------------------------------+</span></span></code></pre></div><p><img src="`+t+`" alt=""></p><h2 id="sse" tabindex="-1"><a href="https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noreferrer">SSE</a> <a class="header-anchor" href="#sse" aria-label="Permalink to &quot;[SSE](https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html)&quot;">​</a></h2><p>服务器向浏览器推送信息，除了 WebSocket的另外一种方式。总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是单向通道，只能服务器向浏览器发送，因为流信息本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。</p><p>所谓<code>SSE（Sever-Sent Event）</code>，就是浏览器向服务器发送一个HTTP请求，保持长连接，服务器不断单向地向浏览器推送“信息”（message），这么做是为了节约网络资源，不用一直发请求，建立新连接。其实就是类似长轮询。</p><p>也可以跨域</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// client</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      withCredentials: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 跨域时，可以指定第二个参数，打开withCredentials属性，表示是否一起发送 Cookie。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 另一种写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="websocket-心跳" tabindex="-1">WebSocket 心跳 <a class="header-anchor" href="#websocket-心跳" aria-label="Permalink to &quot;WebSocket 心跳&quot;">​</a></h3><p>网络中的接收和发送数据都是使用 SOCKET 进行实现。但是如果此套接字已经断开，那发送数据和接收数据的时候就一定会有问题。可是如何判断这个套接字是否还可以使用呢？这个就需要在系统中创建心跳机制。所谓 “心跳” 就是定时发送一个自定义的结构体（心跳包或心跳帧），让对方知道自己 “在线”。 以确保链接的有效性。</p><p>而所谓的心跳包就是客户端定时发送简单的信息给服务器端告诉它我还在而已。代码就是每隔几分钟发送一个固定信息给服务端，服务端收到后回复一个固定信息，如果服务端几分钟内没有收到客户端信息则视客户端断开。</p><p>在 WebSocket 协议中定义了 <strong>心跳 Ping</strong> 和 <strong>心跳 Pong</strong> 的控制帧：</p><ul><li>心跳 Ping 帧包含的操作码是 0x9。如果收到了一个心跳 Ping 帧，那么终端必须发送一个心跳 Pong 帧作为回应，除非已经收到了一个关闭帧。否则终端应该尽快回复 Pong 帧。</li><li>心跳 Pong 帧包含的操作码是 0xA。作为回应发送的 Pong 帧必须完整携带 Ping 帧中传递过来的 “应用数据” 字段。如果终端收到一个 Ping 帧但是没有发送 Pong 帧来回应之前的 Ping 帧，那么终端可以选择仅为最近处理的 Ping 帧发送 Pong 帧。此外，可以自动发送一个 Pong 帧，这用作单向心跳。</li></ul>`,39)]))}const y=a(l,[["render",h]]);export{E as __pageData,y as default};
