import{_ as t,c as a,o as r,ag as i}from"./chunks/framework.BgId8OS5.js";const p=JSON.parse('{"title":"Summary","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/microservices/index.md","filePath":"backEnd/microservices/index.md","lastUpdated":1749566229000}'),s={name:"backEnd/microservices/index.md"};function o(n,e,c,l,m,d){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h1><ul><li><a href="https://serviceweaver.dev/" target="_blank" rel="noreferrer">Write your application as a modular binary. Deploy it as a set of microservices.</a></li></ul><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><ul><li><a href="https://martinfowler.com/articles/microservice-testing/#agenda" target="_blank" rel="noreferrer">Testing Strategies in a Microservice Architecture</a></li></ul><p>The structure is organized according to the testing pyramid, from bottom to top:</p><ul><li>Unit Test – Tests the smallest testable piece of software in the application to verify it behaves as expected.</li><li>Integration Test – Tests integrations with data stores and external components (Kafka integration).</li><li>Component Test – In a microservice architecture, the components are the services themselves.</li><li>Contract Test - Where all the consumer/provider contract lives.</li></ul>',6)]))}const u=t(s,[["render",o]]);export{p as __pageData,u as default};
